//Standard Components
import java.util.*;
import java.util.prefs.*;
import java.io.*;
import javax.swing.*;

public class PrefsPanel extends javax.swing.JFrame {
    protected int timeFormat = ClntComm.MINUTES;
    protected boolean animateIcons = true;
    protected int saveInterval = 60;
    protected int allowedIdle = 0, idleAction;
    protected long countdown;
    protected float countpay;
    protected String idleProject;
    
    private ClntComm clntComm;
    private String themePack, kdeTheme, gtkTheme, lookAndFeel;
    private static boolean timeoutLibrary = false;
    private java.text.NumberFormat dollarFormat;
    private Hashtable lookAndFeels;
    private boolean antialias;
    private boolean groupTime;
    
    static {
        try {
            System.loadLibrary("timeout");
            timeoutLibrary = true;
        } catch (UnsatisfiedLinkError e) {
            timeoutLibrary = false;
        }
    }
    
    /** Creates new form PrefsPanel */
    public PrefsPanel(ClntComm parent) {
        clntComm = parent;
        dollarFormat = java.text.NumberFormat.getInstance();
        dollarFormat.setMinimumFractionDigits(2);
        dollarFormat.setMaximumFractionDigits(2);
        readPrefs();
        initComponents();
        if(!themePack.equals("")) toggleThemePack();
        if(!kdeTheme.equals("")) toggleKDE();
        if(!gtkTheme.equals("")) toggleGTK();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints;

    timeFormatGroup = new javax.swing.ButtonGroup();
    idleGroup = new javax.swing.ButtonGroup();
    tabbedPane = new javax.swing.JTabbedPane();
    prefsPanel = new javax.swing.JPanel();
    prefsInputPanel = new javax.swing.JPanel();
    generalLabel = new javax.swing.JLabel();
    timeFormatLabel = new javax.swing.JLabel();
    minuteButton = new javax.swing.JRadioButton();
    secondButton = new javax.swing.JRadioButton();
    save1Label = new javax.swing.JLabel();
    saveField = new javax.swing.JTextField();
    save2Label = new javax.swing.JLabel();
    showIconCheckBox = new javax.swing.JCheckBox();
    groupTimeCheckBox = new javax.swing.JCheckBox();
    antialiasCheckBox = new javax.swing.JCheckBox();
    prefsButtonPanel = new javax.swing.JPanel();
    prefsOKButton = new javax.swing.JButton();
    prefsCancelButton = new javax.swing.JButton();
    skinsPanel = new javax.swing.JPanel();
    skinsInputPanel = new javax.swing.JPanel();
    skinsLabel = new javax.swing.JLabel();
    lnfLabel = new javax.swing.JLabel();
    lnfComboBox = new javax.swing.JComboBox();
    themeCheckBox = new javax.swing.JCheckBox();
    themeField = new javax.swing.JTextField();
    themeBrowse = new javax.swing.JButton();
    gtkCheckBox = new javax.swing.JCheckBox();
    gtkField = new javax.swing.JTextField();
    gtkBrowse = new javax.swing.JButton();
    kdeCheckBox = new javax.swing.JCheckBox();
    kdeField = new javax.swing.JTextField();
    kdeBrowse = new javax.swing.JButton();
    skinsButtonPanel = new javax.swing.JPanel();
    skinsOKButton = new javax.swing.JButton();
    skinsCancelButton = new javax.swing.JButton();

    getContentPane().setLayout(new java.awt.GridLayout(1, 0));

    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowClosing(java.awt.event.WindowEvent evt)
      {
        exitForm(evt);
      }
    });

    prefsPanel.setLayout(new java.awt.BorderLayout());

    prefsPanel.addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        showPrefs(evt);
      }
    });

    generalLabel.setFont(new java.awt.Font("Arial", 1, 18));
    generalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    generalLabel.setText("General Properties");

    timeFormatLabel.setText("Show time in:  ");

    timeFormatGroup.add(minuteButton);
    minuteButton.setForeground(new java.awt.Color(102, 102, 153));
    minuteButton.setSelected(timeFormat == ClntComm.MINUTES);
    minuteButton.setText("Minutes");

    timeFormatGroup.add(secondButton);
    secondButton.setForeground(new java.awt.Color(102, 102, 153));
    secondButton.setSelected(timeFormat == ClntComm.SECONDS);
    secondButton.setText("Seconds");

    save1Label.setText("Save info every ");

    saveField.setColumns(3);
    saveField.setText(Integer.toString(saveInterval));

    save2Label.setText(" seconds");

    showIconCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    showIconCheckBox.setSelected(animateIcons);
    showIconCheckBox.setText("Show Animated Icons");
    showIconCheckBox.setMargin(new java.awt.Insets(6, 2, 2, 2));
    showIconCheckBox.setVerticalAlignment(javax.swing.SwingConstants.TOP);

    groupTimeCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    groupTimeCheckBox.setSelected(groupTime);
    groupTimeCheckBox.setText("Show Group Time Totals");

    antialiasCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    antialiasCheckBox.setSelected(antialias);
    antialiasCheckBox.setText("Force Font AntiAliasing");

    org.jdesktop.layout.GroupLayout prefsInputPanelLayout = new org.jdesktop.layout.GroupLayout(prefsInputPanel);
    prefsInputPanel.setLayout(prefsInputPanelLayout);
    prefsInputPanelLayout.setHorizontalGroup(
      prefsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(prefsInputPanelLayout.createSequentialGroup()
        .add(prefsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(prefsInputPanelLayout.createSequentialGroup()
            .addContainerGap()
            .add(generalLabel))
          .add(prefsInputPanelLayout.createSequentialGroup()
            .add(55, 55, 55)
            .add(prefsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(showIconCheckBox)
              .add(groupTimeCheckBox)
              .add(antialiasCheckBox)
              .add(prefsInputPanelLayout.createSequentialGroup()
                .add(5, 5, 5)
                .add(prefsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                  .add(save1Label)
                  .add(timeFormatLabel))
                .add(prefsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                  .add(prefsInputPanelLayout.createSequentialGroup()
                    .add(17, 17, 17)
                    .add(minuteButton)
                    .add(12, 12, 12)
                    .add(secondButton))
                  .add(prefsInputPanelLayout.createSequentialGroup()
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(saveField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 75, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(save2Label)))))))
        .addContainerGap(124, Short.MAX_VALUE))
    );
    prefsInputPanelLayout.setVerticalGroup(
      prefsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(prefsInputPanelLayout.createSequentialGroup()
        .addContainerGap()
        .add(generalLabel)
        .add(15, 15, 15)
        .add(prefsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(timeFormatLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(minuteButton)
          .add(secondButton))
        .add(2, 2, 2)
        .add(prefsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(save1Label, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(saveField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(save2Label))
        .add(21, 21, 21)
        .add(showIconCheckBox)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(groupTimeCheckBox)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(antialiasCheckBox)
        .add(42, 42, 42))
    );
    prefsPanel.add(prefsInputPanel, java.awt.BorderLayout.CENTER);

    prefsOKButton.setText("OK");
    prefsOKButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        savePrefs(evt);
      }
    });

    prefsButtonPanel.add(prefsOKButton);

    prefsCancelButton.setText("Cancel");
    prefsCancelButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancel(evt);
      }
    });

    prefsButtonPanel.add(prefsCancelButton);

    prefsPanel.add(prefsButtonPanel, java.awt.BorderLayout.SOUTH);

    tabbedPane.addTab("General", null, prefsPanel, "");

    skinsPanel.setLayout(new java.awt.BorderLayout());

    skinsPanel.addComponentListener(new java.awt.event.ComponentAdapter()
    {
      public void componentShown(java.awt.event.ComponentEvent evt)
      {
        showSkins(evt);
      }
    });

    skinsLabel.setFont(new java.awt.Font("Arial", 1, 18));
    skinsLabel.setText("Load Themes/Skins");

    lnfLabel.setForeground(new java.awt.Color(102, 102, 153));
    lnfLabel.setText("Native Look and Feel");

    lnfComboBox.setModel(getLookAndFeelBoxModel());

    themeCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    themeCheckBox.setSelected(!themePack.equals(""));
    themeCheckBox.setText("Use Theme Pack: ");
    themeCheckBox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        toggleThemePack(evt);
      }
    });

    themeField.setColumns(25);
    themeField.setText(themePack);
    themeField.setEnabled(false);

    themeBrowse.setForeground(new java.awt.Color(102, 102, 153));
    themeBrowse.setText("Browse...");
    themeBrowse.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
    themeBrowse.setEnabled(false);
    themeBrowse.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        findTheme(evt);
      }
    });

    gtkCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    gtkCheckBox.setSelected(!gtkTheme.equals(""));
    gtkCheckBox.setText("Use GTK Theme: ");
    gtkCheckBox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        toggleGTK(evt);
      }
    });

    gtkField.setColumns(25);
    gtkField.setText(gtkTheme);
    gtkField.setEnabled(false);

    gtkBrowse.setForeground(new java.awt.Color(102, 102, 153));
    gtkBrowse.setText("Browse...");
    gtkBrowse.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
    gtkBrowse.setEnabled(false);
    gtkBrowse.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        findGTK(evt);
      }
    });

    kdeCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    kdeCheckBox.setSelected(!kdeTheme.equals(""));
    kdeCheckBox.setText("Use KDE Theme: ");
    kdeCheckBox.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        toggleKDE(evt);
      }
    });

    kdeField.setColumns(25);
    kdeField.setText(kdeTheme);
    kdeField.setEnabled(false);

    kdeBrowse.setForeground(new java.awt.Color(102, 102, 153));
    kdeBrowse.setText("Browse...");
    kdeBrowse.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
    kdeBrowse.setEnabled(false);
    kdeBrowse.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        findKDE(evt);
      }
    });

    org.jdesktop.layout.GroupLayout skinsInputPanelLayout = new org.jdesktop.layout.GroupLayout(skinsInputPanel);
    skinsInputPanel.setLayout(skinsInputPanelLayout);
    skinsInputPanelLayout.setHorizontalGroup(
      skinsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(skinsInputPanelLayout.createSequentialGroup()
        .addContainerGap()
        .add(skinsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(skinsLabel)
          .add(skinsInputPanelLayout.createSequentialGroup()
            .add(12, 12, 12)
            .add(skinsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(skinsInputPanelLayout.createSequentialGroup()
                .add(skinsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                  .add(gtkCheckBox)
                  .add(gtkField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                  .add(kdeCheckBox)
                  .add(kdeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(skinsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                  .add(kdeBrowse)
                  .add(gtkBrowse)))
              .add(lnfComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 368, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(lnfLabel)
              .add(themeCheckBox)
              .add(skinsInputPanelLayout.createSequentialGroup()
                .add(themeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(themeBrowse)))))
        .addContainerGap(70, Short.MAX_VALUE))
    );
    skinsInputPanelLayout.setVerticalGroup(
      skinsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(skinsInputPanelLayout.createSequentialGroup()
        .add(skinsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(skinsInputPanelLayout.createSequentialGroup()
            .addContainerGap()
            .add(skinsLabel)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(lnfLabel)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(lnfComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(10, 10, 10)
            .add(themeCheckBox)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(skinsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
              .add(themeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(themeBrowse)))
          .add(skinsInputPanelLayout.createSequentialGroup()
            .add(147, 147, 147)
            .add(gtkCheckBox)))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(skinsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(gtkField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(gtkBrowse))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(kdeCheckBox)
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(skinsInputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(kdeField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
          .add(kdeBrowse))
        .addContainerGap(14, Short.MAX_VALUE))
    );
    skinsPanel.add(skinsInputPanel, java.awt.BorderLayout.CENTER);

    skinsOKButton.setText("OK");
    skinsOKButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        savePrefs(evt);
      }
    });

    skinsButtonPanel.add(skinsOKButton);

    skinsCancelButton.setText("Cancel");
    skinsCancelButton.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancel(evt);
      }
    });

    skinsButtonPanel.add(skinsCancelButton);

    skinsPanel.add(skinsButtonPanel, java.awt.BorderLayout.SOUTH);

    tabbedPane.addTab("Skins", null, skinsPanel, "");

    getContentPane().add(tabbedPane);

    pack();
  }// </editor-fold>//GEN-END:initComponents
    
  private void showSkins(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_showSkins
      getRootPane().setDefaultButton(skinsOKButton);
  }//GEN-LAST:event_showSkins
  
  private void findKDE(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findKDE
      final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
      int returnVal = fc.showOpenDialog(this);
      if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
          File theme = fc.getSelectedFile();
          kdeTheme = theme.toString();
          kdeField.setText(themePack);
      }
  }//GEN-LAST:event_findKDE
  
  private void findGTK(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findGTK
      final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
      int returnVal = fc.showOpenDialog(this);
      if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
          File theme = fc.getSelectedFile();
          gtkTheme = theme.toString();
          gtkField.setText(themePack);
      }
  }//GEN-LAST:event_findGTK
  
  private void findTheme(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findTheme
      final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
      int returnVal = fc.showOpenDialog(this);
      if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
          File theme = fc.getSelectedFile();
          themePack = theme.toString();
          themeField.setText(themePack);
      }
  }//GEN-LAST:event_findTheme
  
  private void toggleKDE(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleKDE
      toggleKDE();
  }//GEN-LAST:event_toggleKDE
  
  private void toggleKDE() {
      boolean kdetoggle = kdeCheckBox.isSelected();
      boolean themetoggle = kdetoggle || gtkCheckBox.isSelected();
      
      kdeField.setEnabled(kdetoggle);
      kdeBrowse.setEnabled(kdetoggle);
      
      themeCheckBox.setEnabled(! themetoggle);
      if(themetoggle) themeField.setEnabled(false);
      if(themetoggle) themeBrowse.setEnabled(false);
  }
  
  private void toggleGTK(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleGTK
      toggleGTK();
  }//GEN-LAST:event_toggleGTK
  
  private void toggleGTK() {
      boolean gtktoggle = gtkCheckBox.isSelected();
      boolean themetoggle = gtktoggle || kdeCheckBox.isSelected();
      
      gtkField.setEnabled(gtktoggle);
      gtkBrowse.setEnabled(gtktoggle);
      
      themeCheckBox.setEnabled(! themetoggle);
      if(themetoggle) themeField.setEnabled(false);
      if(themetoggle) themeBrowse.setEnabled(false);
  }
  
  private void toggleThemePack(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleThemePack
      toggleThemePack();
  }//GEN-LAST:event_toggleThemePack
  
  private void toggleThemePack() {
      boolean toggle = themeCheckBox.isSelected();
      
      themeField.setEnabled(toggle);
      themeBrowse.setEnabled(toggle);
      
      kdeCheckBox.setEnabled(! toggle);
      if(toggle) kdeField.setEnabled(false);
      if(toggle) kdeBrowse.setEnabled(false);
      
      gtkCheckBox.setEnabled(! toggle);
      if(toggle) gtkField.setEnabled(false);
      if(toggle) gtkBrowse.setEnabled(false);
  }
  
  private ComboBoxModel getLookAndFeelBoxModel() {
    UIManager.LookAndFeelInfo[] lookAndFeels = UIManager.getInstalledLookAndFeels();
    String[] names = new String[lookAndFeels.length];
    this.lookAndFeels = new Hashtable();
    String selected = null;
    
    for(int i=0; i < lookAndFeels.length; i++) {
      String lnfClassName = lookAndFeels[i].getClassName();
      String lnfName = lookAndFeels[i].getName();
      
      this.lookAndFeels.put(lnfName, lnfClassName);
      names[i] = lnfName;
      
      if(lnfClassName.equals(lookAndFeel)) selected = lnfName;
    }
    
    ComboBoxModel model = new DefaultComboBoxModel(names);
    if(selected != null) model.setSelectedItem(selected);
    return model;
  }
  
  private void showPrefs(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_showPrefs
      getRootPane().setDefaultButton(prefsOKButton);
  }//GEN-LAST:event_showPrefs
  
    private void savePrefs(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePrefs
        savePrefs();
        clntComm.reload();
        exitForm();
    }//GEN-LAST:event_savePrefs
    
    private void cancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel
        exitForm();
    }//GEN-LAST:event_cancel
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        exitForm();
    }//GEN-LAST:event_exitForm
    
    private void exitForm() {
        setVisible(false);
        dispose();
    }
    
    /**
     * Read through preferances file
     */
    private void readPrefs() {
        Preferences prefs = Preferences.userRoot().node("CsltComm");
        
        timeFormat = prefs.getInt("timeFormat", ClntComm.MINUTES); //Get time format
        animateIcons = prefs.getBoolean("animations", true); //Get animation flag
        saveInterval = prefs.getInt("saveInterval", 60); //Get save interval
        antialias = prefs.getBoolean("antiAlias", true); //AntiAliased fonts flag
        groupTime = prefs.getBoolean("showGroupTime", true); //Show total group time in tree
        themePack = prefs.get("theme", ""); //Get skins
        kdeTheme = prefs.get("kde", "");
        gtkTheme = prefs.get("gtk", "");
        lookAndFeel = prefs.get("lookandfeel", "");
    }
    
    private void savePrefs() {
        try {
            Preferences prefs = Preferences.userRoot().node("CsltComm");
            
            prefs.putInt("timeFormat", secondButton.isSelected() ? ClntComm.SECONDS : ClntComm.MINUTES); //Save time format
            prefs.putBoolean("animations", showIconCheckBox.isSelected()); //Save animation flag
            prefs.putInt("saveInterval", Integer.parseInt(saveField.getText())); //Save save interval
            prefs.putBoolean("antiAlias", antialiasCheckBox.isSelected()); //Save antialias flag
            prefs.putBoolean("showGroupTime", groupTimeCheckBox.isSelected()); //Save group times flag
            if(themeCheckBox.isSelected()) prefs.put("theme", themeField.getText()); //Save skin settings
            else prefs.put("theme", "");
            if(kdeCheckBox.isSelected()) prefs.put("kde", kdeField.getText()); 
            else prefs.put("kde", "");
            if(gtkCheckBox.isSelected()) prefs.put("gtk", gtkField.getText());
            else prefs.put("gtk", "");
            if(this.lookAndFeels != null) prefs.put("lookandfeel", (String)this.lookAndFeels.get(lnfComboBox.getSelectedItem()));
            else prefs.put("lookandfeel", UIManager.getSystemLookAndFeelClassName());
            
            //Write to file
            prefs.flush();
        } catch(Exception e) {
            System.err.println("Problem saving prefs file..."+e);
        }
    }
    
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JCheckBox antialiasCheckBox;
  private javax.swing.JLabel generalLabel;
  private javax.swing.JCheckBox groupTimeCheckBox;
  private javax.swing.JButton gtkBrowse;
  private javax.swing.JCheckBox gtkCheckBox;
  private javax.swing.JTextField gtkField;
  private javax.swing.ButtonGroup idleGroup;
  private javax.swing.JButton kdeBrowse;
  private javax.swing.JCheckBox kdeCheckBox;
  private javax.swing.JTextField kdeField;
  private javax.swing.JComboBox lnfComboBox;
  private javax.swing.JLabel lnfLabel;
  private javax.swing.JRadioButton minuteButton;
  private javax.swing.JPanel prefsButtonPanel;
  private javax.swing.JButton prefsCancelButton;
  private javax.swing.JPanel prefsInputPanel;
  private javax.swing.JButton prefsOKButton;
  private javax.swing.JPanel prefsPanel;
  private javax.swing.JLabel save1Label;
  private javax.swing.JLabel save2Label;
  private javax.swing.JTextField saveField;
  private javax.swing.JRadioButton secondButton;
  private javax.swing.JCheckBox showIconCheckBox;
  private javax.swing.JPanel skinsButtonPanel;
  private javax.swing.JButton skinsCancelButton;
  private javax.swing.JPanel skinsInputPanel;
  private javax.swing.JLabel skinsLabel;
  private javax.swing.JButton skinsOKButton;
  private javax.swing.JPanel skinsPanel;
  private javax.swing.JTabbedPane tabbedPane;
  private javax.swing.JButton themeBrowse;
  private javax.swing.JCheckBox themeCheckBox;
  private javax.swing.JTextField themeField;
  private javax.swing.ButtonGroup timeFormatGroup;
  private javax.swing.JLabel timeFormatLabel;
  // End of variables declaration//GEN-END:variables
    
}
