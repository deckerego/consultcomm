/*
 * ConsultComm.java
 *
 * Created on March 5, 2007, 10:29 PM
 */

package consultcomm;

import consultcomm.project.Project;
import consultcomm.project.ProjectGroup;
import consultcomm.treetable.ProjectTreeTableModel;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.beans.XMLDecoder;
import java.beans.XMLEncoder;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.prefs.Preferences;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.ListSelectionModel;
import javax.swing.tree.TreePath;
import org.jdesktop.swingx.treetable.DefaultTreeTableModel;

/**
 * The main instance that invokes ConsultComm
 * @author  jellis
 */
public class ConsultComm extends javax.swing.JFrame
{
  private ProjectTreeTableModel projectList;
  private static final String WHOAMI = "ConsultComm 4";
  //TODO: Make Windows-specific directories
  private static final File prefsdir = new File(System.getProperty("user.home")+System.getProperty("file.separator")+".consultcomm");
  private static enum ClientProperties { CLICKED_RECORD };
  
  /** Creates new form ConsultComm */
  public ConsultComm()
  {
    loadPrefs();
    initComponents();
  }
  
  private void loadPrefs()
  {
    if(! prefsdir.exists()) prefsdir.mkdir();
    
    try
    { //Get all projects
      File prefsFile = new File(prefsdir, "projects.xml");
      if(! prefsFile.exists()) prefsFile.createNewFile();
      FileInputStream inStream = new FileInputStream(prefsFile);
      XMLDecoder d = new XMLDecoder(new BufferedInputStream(inStream));
      projectList = (ProjectTreeTableModel) d.readObject();
      d.close();
    }
    catch (Exception e)
    {
      System.err.println("Cannot read projects file: "+e);
      projectList = new ProjectTreeTableModel();
    }
  }
  
  private void savePrefs()
  {
    if(! prefsdir.exists()) prefsdir.mkdir();
    
    try
    { //Save projects
      File prefsFile = new File(prefsdir, "projects.xml");
      FileOutputStream outStream = new FileOutputStream(prefsFile);
      XMLEncoder e = new XMLEncoder(new BufferedOutputStream(outStream));
      e.writeObject(projectList);
      e.close();
    }
    catch (Exception e)
    {
      System.err.println("Cannot read projects file: "+e);
    }
  }
 
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
  private void initComponents()
  {
    projectMenu = new javax.swing.JPopupMenu();
    renameProject = new javax.swing.JMenuItem();
    deleteProject = new javax.swing.JMenuItem();
    groupMenu = new javax.swing.JPopupMenu();
    addProject = new javax.swing.JMenuItem();
    renameGroup = new javax.swing.JMenuItem();
    deleteGroup = new javax.swing.JMenuItem();
    projectScrollPane = new javax.swing.JScrollPane();
    projectTreeTable = new org.jdesktop.swingx.JXTreeTable();
    menuBar = new javax.swing.JMenuBar();
    fileMenu = new javax.swing.JMenu();
    openMenuItem = new javax.swing.JMenuItem();
    saveMenuItem = new javax.swing.JMenuItem();
    saveAsMenuItem = new javax.swing.JMenuItem();
    exitMenuItem = new javax.swing.JMenuItem();
    editMenu = new javax.swing.JMenu();
    cutMenuItem = new javax.swing.JMenuItem();
    copyMenuItem = new javax.swing.JMenuItem();
    pasteMenuItem = new javax.swing.JMenuItem();
    deleteMenuItem = new javax.swing.JMenuItem();
    helpMenu = new javax.swing.JMenu();
    contentsMenuItem = new javax.swing.JMenuItem();
    aboutMenuItem = new javax.swing.JMenuItem();

    renameProject.setText("Rename Project");
    projectMenu.add(renameProject);

    deleteProject.setText("Delete Project");
    projectMenu.add(deleteProject);

    addProject.setText("Add Project");
    addProject.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        addProject(evt);
      }
    });

    groupMenu.add(addProject);

    renameGroup.setText("Rename Group");
    groupMenu.add(renameGroup);

    deleteGroup.setText("Delete Group");
    groupMenu.add(deleteGroup);

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle(WHOAMI);
    addWindowListener(new java.awt.event.WindowAdapter()
    {
      public void windowClosing(java.awt.event.WindowEvent evt)
      {
        formWindowClosing(evt);
      }
    });

    projectTreeTable.setPreferredScrollableViewportSize(new java.awt.Dimension(400, 200));
    projectTreeTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    projectTreeTable.setTreeTableModel(projectList);
    projectTreeTable.addMouseListener(new java.awt.event.MouseAdapter()
    {
      public void mouseClicked(java.awt.event.MouseEvent evt)
      {
        projectTreeTableMouseClicked(evt);
      }
    });

    projectScrollPane.setViewportView(projectTreeTable);

    getContentPane().add(projectScrollPane, java.awt.BorderLayout.CENTER);

    fileMenu.setText("File");
    openMenuItem.setText("Open");
    fileMenu.add(openMenuItem);

    saveMenuItem.setText("Save");
    fileMenu.add(saveMenuItem);

    saveAsMenuItem.setText("Save As ...");
    fileMenu.add(saveAsMenuItem);

    exitMenuItem.setText("Exit");
    exitMenuItem.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        exitMenuItemActionPerformed(evt);
      }
    });

    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    editMenu.setText("Edit");
    cutMenuItem.setText("Cut");
    editMenu.add(cutMenuItem);

    copyMenuItem.setText("Copy");
    editMenu.add(copyMenuItem);

    pasteMenuItem.setText("Paste");
    editMenu.add(pasteMenuItem);

    deleteMenuItem.setText("Delete");
    editMenu.add(deleteMenuItem);

    menuBar.add(editMenu);

    helpMenu.setText("Help");
    contentsMenuItem.setText("Contents");
    helpMenu.add(contentsMenuItem);

    aboutMenuItem.setText("About");
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setJMenuBar(menuBar);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void addProject(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addProject
  {//GEN-HEADEREND:event_addProject
    assert groupMenu.getClientProperty(ClientProperties.CLICKED_RECORD).getClass() == TreePath.class;
    TreePath clickedPath = (TreePath) groupMenu.getClientProperty(ClientProperties.CLICKED_RECORD);
    
    assert clickedPath.getLastPathComponent().getClass() == ProjectGroup.class;
    ProjectGroup projectGroup = (ProjectGroup) clickedPath.getLastPathComponent();
    
    projectGroup.getProjects().add(new Project());
  }//GEN-LAST:event_addProject

  private void projectTreeTableMouseClicked(java.awt.event.MouseEvent evt)//GEN-FIRST:event_projectTreeTableMouseClicked
  {//GEN-HEADEREND:event_projectTreeTableMouseClicked
    switch(evt.getButton())
    {
      case MouseEvent.BUTTON1: //Left mouse click
        break;
      case MouseEvent.BUTTON3: //Right mouse click
        TreePath clickedPath = projectTreeTable.getPathForLocation(evt.getX(), evt.getY());
        
        if(clickedPath.getLastPathComponent().getClass() == Project.class)
        { //Show the project pop-up menu
          projectMenu.putClientProperty(ClientProperties.CLICKED_RECORD, clickedPath);
          projectMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
        
        if(clickedPath.getLastPathComponent().getClass() == ProjectGroup.class)
        { //Show the group pop-up menu
          groupMenu.putClientProperty(ClientProperties.CLICKED_RECORD, clickedPath);
          groupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
        
        break;
      case MouseEvent.BUTTON2: //Middle mouse click
        break;
    }
  }//GEN-LAST:event_projectTreeTableMouseClicked

  private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
  {//GEN-HEADEREND:event_formWindowClosing
    savePrefs();
  }//GEN-LAST:event_formWindowClosing
  
  private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitMenuItemActionPerformed
  {
    System.exit(0);
  }//GEN-LAST:event_exitMenuItemActionPerformed
  
  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    java.awt.EventQueue.invokeLater(new Runnable()
    {
      public void run()
      {
        new ConsultComm().setVisible(true);
      }
    });
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutMenuItem;
  private javax.swing.JMenuItem addProject;
  private javax.swing.JMenuItem contentsMenuItem;
  private javax.swing.JMenuItem copyMenuItem;
  private javax.swing.JMenuItem cutMenuItem;
  private javax.swing.JMenuItem deleteGroup;
  private javax.swing.JMenuItem deleteMenuItem;
  private javax.swing.JMenuItem deleteProject;
  private javax.swing.JMenu editMenu;
  private javax.swing.JMenuItem exitMenuItem;
  private javax.swing.JMenu fileMenu;
  private javax.swing.JPopupMenu groupMenu;
  private javax.swing.JMenu helpMenu;
  private javax.swing.JMenuBar menuBar;
  private javax.swing.JMenuItem openMenuItem;
  private javax.swing.JMenuItem pasteMenuItem;
  private javax.swing.JPopupMenu projectMenu;
  private javax.swing.JScrollPane projectScrollPane;
  private org.jdesktop.swingx.JXTreeTable projectTreeTable;
  private javax.swing.JMenuItem renameGroup;
  private javax.swing.JMenuItem renameProject;
  private javax.swing.JMenuItem saveAsMenuItem;
  private javax.swing.JMenuItem saveMenuItem;
  // End of variables declaration//GEN-END:variables
  
}
