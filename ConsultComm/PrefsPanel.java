//Standard Components
import java.util.*;
import java.io.*;
//XML Components
import org.w3c.dom.*;
import org.xml.sax.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

public class PrefsPanel extends javax.swing.JFrame {
  protected int timeFormat = ClntComm.MINUTES;
  protected boolean animateIcons = true;
  protected int saveInterval = 60;
  protected int allowedIdle = 0, idleAction;
  protected String idleProject;
  private ClntComm clntComm;
  private String themePack, kdeTheme, gtkTheme;
  private static boolean timeoutLibrary = false;
  
  static {
    try {
      System.loadLibrary("timeout");
      timeoutLibrary = true;
    } catch (UnsatisfiedLinkError e) {
      timeoutLibrary = false;
    }
  }

  /** Creates new form PrefsPanel */
  public PrefsPanel(ClntComm parent) {
    clntComm = parent;
    readPrefs();
    initComponents();
    if(!themePack.equals("")) toggleThemePack();
    if(!kdeTheme.equals("")) toggleKDE();
    if(!gtkTheme.equals("")) toggleGTK();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    timeFormatGroup = new javax.swing.ButtonGroup();
    idleGroup = new javax.swing.ButtonGroup();
    tabbedPane = new javax.swing.JTabbedPane();
    prefsPanel = new javax.swing.JPanel();
    prefsInputPanel = new javax.swing.JPanel();
    generalLabel = new javax.swing.JLabel();
    timeFormatLabel = new javax.swing.JLabel();
    minuteButton = new javax.swing.JRadioButton();
    secondButton = new javax.swing.JRadioButton();
    showIconCheckBox = new javax.swing.JCheckBox();
    save1Label = new javax.swing.JLabel();
    saveField = new javax.swing.JTextField();
    save2Label = new javax.swing.JLabel();
    idleCheckBox = new javax.swing.JCheckBox();
    idleField = new javax.swing.JTextField();
    idleLabel = new javax.swing.JLabel();
    pauseIdleRadioButton = new javax.swing.JRadioButton();
    projectIdleRadioButton = new javax.swing.JRadioButton();
    projectIdleComboBox = new javax.swing.JComboBox(clntComm.times.getAllProjects());
    prefsButtonPanel = new javax.swing.JPanel();
    prefsOKButton = new javax.swing.JButton();
    prefsCancelButton = new javax.swing.JButton();
    flagsPanel = new javax.swing.JPanel();
    flagsInputPanel = new javax.swing.JPanel();
    flagLabel = new javax.swing.JLabel();
    billableCheckBox = new javax.swing.JCheckBox();
    exportCheckBox = new javax.swing.JCheckBox();
    flagsButtonPanel = new javax.swing.JPanel();
    flagsOKButton = new javax.swing.JButton();
    flagsCancelButton = new javax.swing.JButton();
    skinsPanel = new javax.swing.JPanel();
    skinsInputPanel = new javax.swing.JPanel();
    skinsLabel = new javax.swing.JLabel();
    themeCheckBox = new javax.swing.JCheckBox();
    themeField = new javax.swing.JTextField();
    themeBrowse = new javax.swing.JButton();
    gtkCheckBox = new javax.swing.JCheckBox();
    gtkField = new javax.swing.JTextField();
    gtkBrowse = new javax.swing.JButton();
    kdeCheckBox = new javax.swing.JCheckBox();
    kdeField = new javax.swing.JTextField();
    kdeBrowse = new javax.swing.JButton();
    skinsButtonPanel = new javax.swing.JPanel();
    skinsOKButton = new javax.swing.JButton();
    skinsCancelButton = new javax.swing.JButton();
    
    
    getContentPane().setLayout(new java.awt.GridLayout(1, 0));
    
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        exitForm(evt);
      }
    });
    
    prefsPanel.setLayout(new java.awt.BorderLayout());
    
    prefsPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        showPrefs(evt);
      }
    });
    
    prefsInputPanel.setLayout(new java.awt.GridBagLayout());
    java.awt.GridBagConstraints gridBagConstraints1;
    
    generalLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    generalLabel.setText("General Properties");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.insets = new java.awt.Insets(10, 0, 5, 0);
    prefsInputPanel.add(generalLabel, gridBagConstraints1);
    
    timeFormatLabel.setText("Show time in:  ");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    prefsInputPanel.add(timeFormatLabel, gridBagConstraints1);
    
    minuteButton.setForeground(new java.awt.Color(102, 102, 153));
    minuteButton.setSelected(timeFormat == ClntComm.MINUTES);
    minuteButton.setText("Minutes");
    timeFormatGroup.add(minuteButton);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    prefsInputPanel.add(minuteButton, gridBagConstraints1);
    
    secondButton.setForeground(new java.awt.Color(102, 102, 153));
    secondButton.setSelected(timeFormat == ClntComm.SECONDS);
    secondButton.setText("Seconds");
    timeFormatGroup.add(secondButton);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    prefsInputPanel.add(secondButton, gridBagConstraints1);
    
    showIconCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    showIconCheckBox.setSelected(animateIcons);
    showIconCheckBox.setText("Show Animated Icons");
    showIconCheckBox.setMargin(new java.awt.Insets(6, 2, 2, 2));
    showIconCheckBox.setVerticalAlignment(javax.swing.SwingConstants.TOP);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    prefsInputPanel.add(showIconCheckBox, gridBagConstraints1);
    
    save1Label.setText("Save info every ");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    prefsInputPanel.add(save1Label, gridBagConstraints1);
    
    saveField.setColumns(3);
    saveField.setText(Integer.toString(saveInterval));
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    prefsInputPanel.add(saveField, gridBagConstraints1);
    
    save2Label.setText(" seconds");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    prefsInputPanel.add(save2Label, gridBagConstraints1);
    
    idleCheckBox.setSelected(allowedIdle > 0);
    idleCheckBox.setText("When idle for ");
    idleCheckBox.setEnabled(timeoutLibrary);
    idleCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        toggleIdle(evt);
      }
    });
    
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    prefsInputPanel.add(idleCheckBox, gridBagConstraints1);
    
    idleField.setColumns(3);
    idleField.setText(Integer.toString(allowedIdle));
    idleField.setEnabled(timeoutLibrary && idleCheckBox.isSelected());
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    prefsInputPanel.add(idleField, gridBagConstraints1);
    
    idleLabel.setText(" seconds");
    idleLabel.setEnabled(timeoutLibrary);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    prefsInputPanel.add(idleLabel, gridBagConstraints1);
    
    pauseIdleRadioButton.setSelected(idleAction == ClntComm.IDLE_PAUSE);
    pauseIdleRadioButton.setText("Pause Timer");
    idleGroup.add(pauseIdleRadioButton);
    pauseIdleRadioButton.setEnabled(timeoutLibrary && idleCheckBox.isSelected());
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    prefsInputPanel.add(pauseIdleRadioButton, gridBagConstraints1);
    
    projectIdleRadioButton.setSelected(idleAction == ClntComm.IDLE_PROJECT);
    projectIdleRadioButton.setText("Switch to project ");
    idleGroup.add(projectIdleRadioButton);
    projectIdleRadioButton.setEnabled(timeoutLibrary && idleCheckBox.isSelected());
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    prefsInputPanel.add(projectIdleRadioButton, gridBagConstraints1);
    
    projectIdleComboBox.setSelectedItem(idleProject);
    projectIdleComboBox.setEnabled(timeoutLibrary && idleCheckBox.isSelected());
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    prefsInputPanel.add(projectIdleComboBox, gridBagConstraints1);
    
    prefsPanel.add(prefsInputPanel, java.awt.BorderLayout.CENTER);
    
    prefsOKButton.setText("OK");
    prefsOKButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        savePrefs(evt);
      }
    });
    
    prefsButtonPanel.add(prefsOKButton);
    
    prefsCancelButton.setText("Cancel");
    prefsCancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancel(evt);
      }
    });
    
    prefsButtonPanel.add(prefsCancelButton);
    
    prefsPanel.add(prefsButtonPanel, java.awt.BorderLayout.SOUTH);
    
    tabbedPane.addTab("General", prefsPanel);
    
    flagsPanel.setLayout(new java.awt.BorderLayout());
    
    flagsPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        showFlags(evt);
      }
    });
    
    flagsInputPanel.setLayout(new java.awt.GridBagLayout());
    java.awt.GridBagConstraints gridBagConstraints2;
    
    flagLabel.setText("Project Attribute Flags");
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints2.insets = new java.awt.Insets(10, 0, 5, 0);
    flagsInputPanel.add(flagLabel, gridBagConstraints2);
    
    billableCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    billableCheckBox.setSelected(clntComm.attributeSet(ClntComm.SHOW_BILLABLE));
    billableCheckBox.setText("Show Billable Flag");
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
    flagsInputPanel.add(billableCheckBox, gridBagConstraints2);
    
    exportCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    exportCheckBox.setSelected(clntComm.attributeSet(ClntComm.SHOW_EXPORT));
    exportCheckBox.setText("Use Export to Database Flag");
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
    flagsInputPanel.add(exportCheckBox, gridBagConstraints2);
    
    flagsPanel.add(flagsInputPanel, java.awt.BorderLayout.CENTER);
    
    flagsOKButton.setText("OK");
    flagsOKButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        savePrefs(evt);
      }
    });
    
    flagsButtonPanel.add(flagsOKButton);
    
    flagsCancelButton.setText("Cancel");
    flagsCancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancel(evt);
      }
    });
    
    flagsButtonPanel.add(flagsCancelButton);
    
    flagsPanel.add(flagsButtonPanel, java.awt.BorderLayout.SOUTH);
    
    tabbedPane.addTab("Flags", flagsPanel);
    
    skinsPanel.setLayout(new java.awt.BorderLayout());
    
    skinsPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        showSkins(evt);
      }
    });
    
    skinsInputPanel.setLayout(new java.awt.GridBagLayout());
    java.awt.GridBagConstraints gridBagConstraints3;
    
    skinsLabel.setText("Load Themes/Skins");
    gridBagConstraints3 = new java.awt.GridBagConstraints();
    gridBagConstraints3.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    skinsInputPanel.add(skinsLabel, gridBagConstraints3);
    
    themeCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    themeCheckBox.setSelected(!themePack.equals(""));
    themeCheckBox.setText("Use Theme Pack: ");
    themeCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        toggleThemePack(evt);
      }
    });
    
    gridBagConstraints3 = new java.awt.GridBagConstraints();
    gridBagConstraints3.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints3.anchor = java.awt.GridBagConstraints.WEST;
    skinsInputPanel.add(themeCheckBox, gridBagConstraints3);
    
    themeField.setColumns(25);
    themeField.setText(themePack);
    themeField.setEnabled(false);
    gridBagConstraints3 = new java.awt.GridBagConstraints();
    gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
    skinsInputPanel.add(themeField, gridBagConstraints3);
    
    themeBrowse.setForeground(new java.awt.Color(102, 102, 153));
    themeBrowse.setText("Browse...");
    themeBrowse.setEnabled(false);
    themeBrowse.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        findTheme(evt);
      }
    });
    
    gridBagConstraints3 = new java.awt.GridBagConstraints();
    gridBagConstraints3.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints3.anchor = java.awt.GridBagConstraints.WEST;
    skinsInputPanel.add(themeBrowse, gridBagConstraints3);
    
    gtkCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    gtkCheckBox.setSelected(!gtkTheme.equals(""));
    gtkCheckBox.setText("Use GTK Theme: ");
    gtkCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        toggleGTK(evt);
      }
    });
    
    gridBagConstraints3 = new java.awt.GridBagConstraints();
    gridBagConstraints3.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints3.anchor = java.awt.GridBagConstraints.WEST;
    skinsInputPanel.add(gtkCheckBox, gridBagConstraints3);
    
    gtkField.setColumns(25);
    gtkField.setText(kdeTheme);
    gtkField.setEnabled(false);
    gridBagConstraints3 = new java.awt.GridBagConstraints();
    gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
    skinsInputPanel.add(gtkField, gridBagConstraints3);
    
    gtkBrowse.setForeground(new java.awt.Color(102, 102, 153));
    gtkBrowse.setText("Browse...");
    gtkBrowse.setEnabled(false);
    gtkBrowse.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        findGTK(evt);
      }
    });
    
    gridBagConstraints3 = new java.awt.GridBagConstraints();
    gridBagConstraints3.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints3.anchor = java.awt.GridBagConstraints.WEST;
    skinsInputPanel.add(gtkBrowse, gridBagConstraints3);
    
    kdeCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    kdeCheckBox.setSelected(!kdeTheme.equals(""));
    kdeCheckBox.setText("Use KDE Theme: ");
    kdeCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        toggleKDE(evt);
      }
    });
    
    gridBagConstraints3 = new java.awt.GridBagConstraints();
    gridBagConstraints3.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints3.anchor = java.awt.GridBagConstraints.WEST;
    skinsInputPanel.add(kdeCheckBox, gridBagConstraints3);
    
    kdeField.setColumns(25);
    kdeField.setText(gtkTheme);
    kdeField.setEnabled(false);
    gridBagConstraints3 = new java.awt.GridBagConstraints();
    gridBagConstraints3.fill = java.awt.GridBagConstraints.HORIZONTAL;
    skinsInputPanel.add(kdeField, gridBagConstraints3);
    
    kdeBrowse.setForeground(new java.awt.Color(102, 102, 153));
    kdeBrowse.setText("Browse...");
    kdeBrowse.setEnabled(false);
    kdeBrowse.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        findKDE(evt);
      }
    });
    
    gridBagConstraints3 = new java.awt.GridBagConstraints();
    gridBagConstraints3.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints3.anchor = java.awt.GridBagConstraints.WEST;
    skinsInputPanel.add(kdeBrowse, gridBagConstraints3);
    
    skinsPanel.add(skinsInputPanel, java.awt.BorderLayout.CENTER);
    
    skinsOKButton.setText("OK");
    skinsOKButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        savePrefs(evt);
      }
    });
    
    skinsButtonPanel.add(skinsOKButton);
    
    skinsCancelButton.setText("Cancel");
    skinsCancelButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancel(evt);
      }
    });
    
    skinsButtonPanel.add(skinsCancelButton);
    
    skinsPanel.add(skinsButtonPanel, java.awt.BorderLayout.SOUTH);
    
    tabbedPane.addTab("Skins", skinsPanel);
    
    getContentPane().add(tabbedPane);
    
    pack();
  }//GEN-END:initComponents

  private void toggleIdle(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleIdle
    if(idleCheckBox.isSelected()) {
      idleField.setEnabled(true);
      pauseIdleRadioButton.setEnabled(true);
      projectIdleRadioButton.setEnabled(true);
      projectIdleComboBox.setEnabled(true);
    } else {
      idleField.setEnabled(false);
      pauseIdleRadioButton.setEnabled(false);
      projectIdleRadioButton.setEnabled(false);
      projectIdleComboBox.setEnabled(false);
    }
  }//GEN-LAST:event_toggleIdle

  private void showSkins(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_showSkins
    getRootPane().setDefaultButton(skinsOKButton);
  }//GEN-LAST:event_showSkins

  private void findKDE(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findKDE
    final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
    int returnVal = fc.showOpenDialog(this);
    if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
      File theme = fc.getSelectedFile();
      kdeTheme = theme.toString();
      kdeField.setText(themePack);
    }
  }//GEN-LAST:event_findKDE

  private void findGTK(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findGTK
    final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
    int returnVal = fc.showOpenDialog(this);
    if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
      File theme = fc.getSelectedFile();
      gtkTheme = theme.toString();
      gtkField.setText(themePack);
    }
  }//GEN-LAST:event_findGTK

  private void findTheme(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findTheme
    final javax.swing.JFileChooser fc = new javax.swing.JFileChooser();
    int returnVal = fc.showOpenDialog(this);
    if(returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
      File theme = fc.getSelectedFile();
      themePack = theme.toString();
      themeField.setText(themePack);
    }
  }//GEN-LAST:event_findTheme

  private void toggleKDE(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleKDE
    toggleKDE();
  }//GEN-LAST:event_toggleKDE

  private void toggleKDE() {
    boolean kdetoggle = kdeCheckBox.isSelected();
    boolean themetoggle = kdetoggle || gtkCheckBox.isSelected();
    
    kdeField.setEnabled(kdetoggle);
    kdeBrowse.setEnabled(kdetoggle);

    themeCheckBox.setEnabled(! themetoggle);
    if(themetoggle) themeField.setEnabled(false);
    if(themetoggle) themeBrowse.setEnabled(false);
  }
  
  private void toggleGTK(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleGTK
    toggleGTK();
  }//GEN-LAST:event_toggleGTK

  private void toggleGTK() {
    boolean gtktoggle = gtkCheckBox.isSelected();
    boolean themetoggle = gtktoggle || kdeCheckBox.isSelected();
    
    gtkField.setEnabled(gtktoggle);
    gtkBrowse.setEnabled(gtktoggle);

    themeCheckBox.setEnabled(! themetoggle);
    if(themetoggle) themeField.setEnabled(false);
    if(themetoggle) themeBrowse.setEnabled(false);
  }
  
  private void toggleThemePack(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleThemePack
    toggleThemePack();
  }//GEN-LAST:event_toggleThemePack

  private void toggleThemePack() {
    boolean toggle = themeCheckBox.isSelected();
    
    themeField.setEnabled(toggle);
    themeBrowse.setEnabled(toggle);

    kdeCheckBox.setEnabled(! toggle);
    if(toggle) kdeField.setEnabled(false);
    if(toggle) kdeBrowse.setEnabled(false);

    gtkCheckBox.setEnabled(! toggle);
    if(toggle) gtkField.setEnabled(false);
    if(toggle) gtkBrowse.setEnabled(false);
  }
  
  private void showFlags(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_showFlags
    getRootPane().setDefaultButton(flagsOKButton);
  }//GEN-LAST:event_showFlags

  private void showPrefs(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_showPrefs
    getRootPane().setDefaultButton(prefsOKButton);
  }//GEN-LAST:event_showPrefs
    
    private void savePrefs(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePrefs
      savePrefs();
      clntComm.reload();
      exitForm();
    }//GEN-LAST:event_savePrefs
    
    private void cancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel
      exitForm();
    }//GEN-LAST:event_cancel
    
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
      exitForm();
    }//GEN-LAST:event_exitForm
    
    private void exitForm() {
      setVisible(false);
      dispose();
    }
    
    /**
     * Read through preferances file
     */
    private void readPrefs() {
      try {
        File prefs = new File(CsltComm.prefsDir, "ClntComm.def");
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        docBuilderFactory = DocumentBuilderFactory.newInstance();
        docBuilder = docBuilderFactory.newDocumentBuilder();
        Document doc;
        
        if(prefs.exists()) {
          doc = docBuilder.parse(prefs);
          doc.getDocumentElement().normalize();
        } else {
          doc = docBuilder.newDocument();
          Element rootNode = doc.createElement("clntcomm");
          rootNode.setAttribute("version", "2.2");
          doc.appendChild(rootNode);
        }
      
        NamedNodeMap attributes = null;
        
        //Get time format
        NodeList timeFormats = doc.getElementsByTagName("timeformat");
        if(timeFormats.getLength() > 0) {
          Node timeFormatting = timeFormats.item(0);
          attributes = timeFormatting.getAttributes();
          String timeFormatString = attributes.getNamedItem("type").getNodeValue();
          if(timeFormatString.equals("seconds")) timeFormat = ClntComm.SECONDS;
          if(timeFormatString.equals("minutes")) timeFormat = ClntComm.MINUTES;
        } else {
          timeFormat = ClntComm.MINUTES;
        }
        
        //Get animation flag
        NodeList iconAnimations = doc.getElementsByTagName("animations");
        if(iconAnimations.getLength() > 0) {
          Node iconAnimation = iconAnimations.item(0);
          attributes = iconAnimation.getAttributes();
          if(attributes.getNamedItem("display").getNodeValue().equals("true"))
            animateIcons = true;
          else
            animateIcons = false;
        } else {
          animateIcons = true;
        }
        
        //Get save interval
        NodeList saveInfos = doc.getElementsByTagName("saveinfo");
        if(saveInfos.getLength() > 0) {
          Node saveInfo = saveInfos.item(0);
          attributes = saveInfo.getAttributes();
          String saveIntervalString = attributes.getNamedItem("seconds").getNodeValue();
          saveInterval = Integer.parseInt(saveIntervalString);
        } else {
          saveInterval = 60;
        }
        
        //Get idle time settings
        NodeList idleTimes = doc.getElementsByTagName("idle");
        if(idleTimes.getLength() > 0) {
          Node idleTime = idleTimes.item(0);
          attributes = idleTime.getAttributes();
          String allowedIdleString = attributes.getNamedItem("seconds").getNodeValue();
          allowedIdle = Integer.parseInt(allowedIdleString);
          
          Node idleActionItem = attributes.getNamedItem("action");
          if(idleActionItem != null) {
            String idleActionString = idleActionItem.getNodeValue();
            if(idleActionString.equals("project"))
              idleAction = ClntComm.IDLE_PROJECT;
            else
              idleAction = ClntComm.IDLE_PAUSE;
          } else {
            idleAction = ClntComm.IDLE_PAUSE;
          }
          
          Node idleProjectItem = attributes.getNamedItem("project");
          if(idleProjectItem != null)
            idleProject = idleProjectItem.getNodeValue();
          else
            idleProject = "";
        } else {
          allowedIdle = 0;
          idleAction = ClntComm.IDLE_PAUSE;
          idleProject = "";
        }
        
        //Get skins
        NodeList skinElements = doc.getElementsByTagName("skin");
        if(skinElements.getLength() > 0) {
          Node skinElement = skinElements.item(0);
          attributes = skinElement.getAttributes();
          Node themePackItem = attributes.getNamedItem("theme");
          if(themePackItem != null) themePack = themePackItem.getNodeValue();
          else themePack = "";
          Node kdeThemeItem = attributes.getNamedItem("kde");
          if(kdeThemeItem != null) kdeTheme = kdeThemeItem.getNodeValue();
          else kdeTheme = "";
          Node gtkThemeItem = attributes.getNamedItem("gtk");
          if(gtkThemeItem != null) gtkTheme = gtkThemeItem.getNodeValue();
          else gtkTheme = "";
        } else {
          themePack = "";
          kdeTheme = "";
          gtkTheme = "";
        }
      } catch (SAXParseException e) {
        System.err.println("Error parsing prefs file, line "+e.getLineNumber()+": "+e.getMessage());
      } catch (SAXException e) {
        System.err.println("Error reading prefs file: "+e);
        e.printStackTrace(System.out);
      } catch (IOException e) {
        System.err.println("Cannot create new preferences file! "+e);
      } catch (Exception e) {
        System.err.println("Cannot read prefs file: "+e);
        e.printStackTrace(System.out);
      }
    }
    
    private void savePrefs() {
      File prefs = new File(CsltComm.prefsDir, "ClntComm.def");
      try {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document doc;
        Element rootNode, newNode;
        
        if (prefs.exists()) {
          doc = docBuilder.parse(prefs);
          rootNode = doc.getDocumentElement();
        } else {
          doc = docBuilder.newDocument();
          rootNode = doc.createElement("clntcomm");
          rootNode.setAttribute("version", "2.2");
          doc.appendChild(rootNode);
        }
        rootNode.normalize();
        
        
        //Save time format
        NodeList timeFormats = doc.getElementsByTagName("timeformat");
        newNode = doc.createElement("timeformat");
        if(secondButton.isSelected()) newNode.setAttribute("type", "seconds");
        if(minuteButton.isSelected()) newNode.setAttribute("type", "minutes");
        if(timeFormats.getLength() > 0) {
          Node timeFormatting = timeFormats.item(0);
          rootNode.replaceChild(newNode, timeFormatting);
        } else {
          rootNode.appendChild(newNode);
        }
        
        //Save animation flag
        NodeList iconAnimations = doc.getElementsByTagName("animations");
        newNode = doc.createElement("animations");
        newNode.setAttribute("display", ""+showIconCheckBox.isSelected());
        if(iconAnimations.getLength() > 0) {
          Node iconAnimation = iconAnimations.item(0);
          rootNode.replaceChild(newNode, iconAnimation);
        } else {
          rootNode.appendChild(newNode);
        }
        
        //Save attribute flag settings
        int attributes = 0;
        if(billableCheckBox.isSelected()) attributes = attributes | ClntComm.SHOW_BILLABLE;
        if(exportCheckBox.isSelected()) attributes = attributes | ClntComm.SHOW_EXPORT;
        
        NodeList attributeFlags = doc.getElementsByTagName("attributes");
        newNode = doc.createElement("attributes");
        newNode.setAttribute("value", Integer.toString(attributes));
        if(attributeFlags.getLength() > 0) {
          Node attributeFlag = attributeFlags.item(0);
          rootNode.replaceChild(newNode, attributeFlag);
        } else {
          rootNode.appendChild(newNode);
        }
        
        //Save save interval
        NodeList saveInfos = doc.getElementsByTagName("saveinfo");
        newNode = doc.createElement("saveinfo");
        newNode.setAttribute("seconds", saveField.getText());
        if(saveInfos.getLength() > 0) {
          Node saveInfo = saveInfos.item(0);
          rootNode.replaceChild(newNode, saveInfo);
        } else {
          rootNode.appendChild(newNode);
        }
        
        //Save idle info
        NodeList idleTimes = doc.getElementsByTagName("idle");
        newNode = doc.createElement("idle");
        newNode.setAttribute("seconds", idleCheckBox.isSelected() ? idleField.getText() : "0");
        newNode.setAttribute("action", projectIdleRadioButton.isSelected() ? "project" : "pause");
        newNode.setAttribute("project", projectIdleComboBox.getSelectedItem().toString());
        if(idleTimes.getLength() > 0) {
          Node idleTime = idleTimes.item(0);
          rootNode.replaceChild(newNode, idleTime);
        } else {
          rootNode.appendChild(newNode);
        }
        
        //Save skin settings
        NodeList skinElements = doc.getElementsByTagName("skin");
        newNode = doc.createElement("skin");
        if(themeCheckBox.isSelected()) newNode.setAttribute("theme", themeField.getText());
        if(kdeCheckBox.isSelected()) newNode.setAttribute("kde", kdeField.getText());
        if(gtkCheckBox.isSelected()) newNode.setAttribute("gtk", gtkField.getText());
        if(skinElements.getLength() > 0) {
          Node skinElement = skinElements.item(0);
          rootNode.replaceChild(newNode, skinElement);
        } else {
          rootNode.appendChild(newNode);
        }
        
        //Write to file
        doc.getDocumentElement().normalize();
        TransformerFactory fac = TransformerFactory.newInstance();
        Transformer trans = fac.newTransformer();
        trans.transform(new DOMSource(doc.getDocumentElement()), new StreamResult(prefs));
      } catch (ParserConfigurationException e) {
        System.err.println("Error writing prefs file: "+e);
      } catch (Exception e) {
        System.err.println("Cannot write to prefs file: "+e);
        e.printStackTrace();
      }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup timeFormatGroup;
    private javax.swing.ButtonGroup idleGroup;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JPanel prefsPanel;
    private javax.swing.JPanel prefsInputPanel;
    private javax.swing.JLabel generalLabel;
    private javax.swing.JLabel timeFormatLabel;
    private javax.swing.JRadioButton minuteButton;
    private javax.swing.JRadioButton secondButton;
    private javax.swing.JCheckBox showIconCheckBox;
    private javax.swing.JLabel save1Label;
    private javax.swing.JTextField saveField;
    private javax.swing.JLabel save2Label;
    private javax.swing.JCheckBox idleCheckBox;
    private javax.swing.JTextField idleField;
    private javax.swing.JLabel idleLabel;
    private javax.swing.JRadioButton pauseIdleRadioButton;
    private javax.swing.JRadioButton projectIdleRadioButton;
    private javax.swing.JComboBox projectIdleComboBox;
    private javax.swing.JPanel prefsButtonPanel;
    private javax.swing.JButton prefsOKButton;
    private javax.swing.JButton prefsCancelButton;
    private javax.swing.JPanel flagsPanel;
    private javax.swing.JPanel flagsInputPanel;
    private javax.swing.JLabel flagLabel;
    private javax.swing.JCheckBox billableCheckBox;
    private javax.swing.JCheckBox exportCheckBox;
    private javax.swing.JPanel flagsButtonPanel;
    private javax.swing.JButton flagsOKButton;
    private javax.swing.JButton flagsCancelButton;
    private javax.swing.JPanel skinsPanel;
    private javax.swing.JPanel skinsInputPanel;
    private javax.swing.JLabel skinsLabel;
    private javax.swing.JCheckBox themeCheckBox;
    private javax.swing.JTextField themeField;
    private javax.swing.JButton themeBrowse;
    private javax.swing.JCheckBox gtkCheckBox;
    private javax.swing.JTextField gtkField;
    private javax.swing.JButton gtkBrowse;
    private javax.swing.JCheckBox kdeCheckBox;
    private javax.swing.JTextField kdeField;
    private javax.swing.JButton kdeBrowse;
    private javax.swing.JPanel skinsButtonPanel;
    private javax.swing.JButton skinsOKButton;
    private javax.swing.JButton skinsCancelButton;
    // End of variables declaration//GEN-END:variables
    
}
