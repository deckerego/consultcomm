//Standard Components
import java.io.*;
import java.net.*;
//XML Components
import org.w3c.dom.*;
import org.xml.sax.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;
//Swing/AWT Components
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
//SkinLF support from L2FProd.com
import com.l2fprod.gui.plaf.skin.Skin;
import com.l2fprod.gui.plaf.skin.CompoundSkin;
import com.l2fprod.gui.plaf.skin.SkinLookAndFeel;


public class CsltComm extends javax.swing.JFrame {
  public static final String release = "ConsultComm CVS Release";
  final static File prefsDir = new File(System.getProperty("user.home")+System.getProperty("file.separator")+"CsltComm");
  static MediaTracker iconTracker;
  static AnimatePanel iconPanel;
  static Timer iconTimer;
  private ClntComm projectList;
  private String themePack, gtkTheme, kdeTheme;
  protected Image appIcon;
  protected boolean animateIcons = true;
  
  /** Creates new form CsltComm */
  public CsltComm() {
    appIcon = CsltComm.getImage(this, "graphics/icon.gif");
    Skin skin = null;
    
    try {
      Class.forName("javax.xml.parsers.DocumentBuilder"); // jaxp.jar
      Class.forName("org.w3c.dom.Document"); // crimson.jar
      Class.forName("org.xml.sax.Parser"); // xalan.jar
    } catch (ClassNotFoundException e) {
      String extdir = System.getProperty("java.ext.dirs");
      String errMsg = "Java API for XML Parsing was not found.\n"+
      "Make sure you have downloaded the Java API at\n"+
      "http://java.sun.com/xml/download.html and have installed\n"+
      "all .jar files in "+extdir;
      JOptionPane.showMessageDialog(this, errMsg, "JAXP Not Found", JOptionPane.ERROR_MESSAGE);
      System.exit(0);
    }
    
    prefsDir.mkdir();
    readPrefs();
    
    try {
      if((kdeTheme != null) && (gtkTheme != null))
        skin = new CompoundSkin(SkinLookAndFeel.loadSkin(kdeTheme), SkinLookAndFeel.loadSkin(gtkTheme));
      else if(kdeTheme != null)
        skin = SkinLookAndFeel.loadSkin(kdeTheme);
      else if(gtkTheme != null)
        skin = SkinLookAndFeel.loadSkin(gtkTheme);
      else if(themePack != null)
        skin = SkinLookAndFeel.loadThemePack(themePack);
      
      if(skin != null) {
        SkinLookAndFeel.setSkin(skin);
        UIManager.setLookAndFeel("com.l2fprod.gui.plaf.skin.SkinLookAndFeel");
      }
    } catch (ClassNotFoundException e) {
      System.err.println("Couldn't load theme engine!");
    } catch (Exception e) {
      System.err.println("Couldn't load theme! "+e);
    }
    
    initComponents();
    
    projectList = new ClntComm(this);
    getContentPane().add(projectList);

    if(animateIcons) {
      Image clockIcon = CsltComm.getImage(this, "graphics/BlueBar.gif");
      iconPanel = new AnimatePanel(clockIcon);      
      getContentPane().add(iconPanel);
      iconPanel.start();
    }
    
    pack();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the FormEditor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    
    getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));
    
    setTitle(release);
    setIconImage(appIcon);
    setName("frame");
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        exitForm(evt);
      }
    });
    
  }//GEN-END:initComponents
  
  /** Exit the Application */
  private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
    projectList.exitForm();
    System.exit(0);
  }//GEN-LAST:event_exitForm
  
  public void reload() {
    Skin skin = null;
    
    if(iconPanel != null) remove(iconPanel);
    
    readPrefs();
    
    try {
      if((kdeTheme != null) && (gtkTheme != null))
        skin = new CompoundSkin(SkinLookAndFeel.loadSkin(kdeTheme), SkinLookAndFeel.loadSkin(gtkTheme));
      else if(kdeTheme != null)
        skin = SkinLookAndFeel.loadSkin(kdeTheme);
      else if(gtkTheme != null)
        skin = SkinLookAndFeel.loadSkin(gtkTheme);
      else if(themePack != null)
        skin = SkinLookAndFeel.loadThemePack(themePack);
      
      if(skin != null) {
        SkinLookAndFeel.setSkin(skin);
        UIManager.setLookAndFeel("com.l2fprod.gui.plaf.skin.SkinLookAndFeel");
      } else {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
      }
    } catch (ClassNotFoundException e) {
      System.err.println("Couldn't load theme engine!");
    } catch (Exception e) {
      System.err.println("Couldn't load theme! "+e);
    }

    if(animateIcons) {
      getContentPane().add(iconPanel);
      iconPanel.start();
    }
    
    pack();
  }
  
  /**
   * Read through preferances file
   */
  private void readPrefs() {
    try {
      File prefs = new File(CsltComm.prefsDir, "ClntComm.def");
      DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
      DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
      docBuilder = docBuilderFactory.newDocumentBuilder();
      Document doc;
      
      if(prefs.exists()) {
        doc = docBuilder.parse(prefs);
        doc.getDocumentElement().normalize();
      } else {
        doc = docBuilder.newDocument();
        Element rootNode = doc.createElement("clntcomm");
        rootNode.setAttribute("version", "2.2");
        doc.appendChild(rootNode);
      }
      
      NamedNodeMap attributes = null;
      
      //Get animation flag
      NodeList iconAnimations = doc.getElementsByTagName("animations");
      Node iconAnimation = iconAnimations.item(0);
      if(iconAnimation != null) {
        attributes = iconAnimation.getAttributes();
        if(attributes.getNamedItem("display").getNodeValue().equals("true"))
          animateIcons = true;
        else
          animateIcons = false;
      } else {
        animateIcons = true;
      }
      
      //Get skins
      NodeList skinElements = doc.getElementsByTagName("skin");
      Node skinElement = skinElements.item(0);
      if(skinElement != null) {
        attributes = skinElement.getAttributes();
        Node themePackItem = attributes.getNamedItem("theme");
        if(themePackItem != null) themePack = themePackItem.getNodeValue();
        else themePack =  null;
        Node kdeThemeItem = attributes.getNamedItem("kde");
        if(kdeThemeItem != null) kdeTheme = kdeThemeItem.getNodeValue();
        else kdeTheme = null;
        Node gtkThemeItem = attributes.getNamedItem("gtk");
        if(gtkThemeItem != null) gtkTheme = gtkThemeItem.getNodeValue();
        else gtkTheme = null;
      } else {
        themePack = null;
        kdeTheme = null;
        gtkTheme = null;
      }
    } catch (SAXParseException e) {
      System.err.println("Error parsing prefs file, line "+e.getLineNumber()+": "+e.getMessage());
    } catch (SAXException e) {
      System.err.println("Error reading prefs file: "+e);
      e.printStackTrace(System.out);
    } catch (Exception e) {
      System.err.println("Cannot read prefs file: "+e);
      e.printStackTrace(System.out);
    }
  }
  
  public static void main(String args[]) {
    new CsltComm().show();
  }
  
  /**
   * Translate a file from a bytestream in the JAR file
   * @param parent The parent object that is loading the file
   * @param path The relative path to the file stored in a Java Archive
   */
  static File getFile(Object parent, String path) {
    File file = null;    
    byte[] tn = null;
    InputStream in = parent.getClass().getResourceAsStream(path);
    try{
      file = File.createTempFile("csltcomm", null);
      file.deleteOnExit();
      FileOutputStream fout = new FileOutputStream(file);
      int length = in.available();
      tn = new byte[length];
      in.read(tn);
      fout.write(tn);
    } catch(Exception e){
      System.out.println("Error loading file "+path+": "+e);
    }
    return file;
  }
  
  /**
   * Translate an image from a bytestream in the JAR file
   * @param parent The parent object that is loading the file
   * @param path The relative path to the file stored in a Java Archive
   */
  static Image getImage(Object parent, String path) {
    Image image = null;
    byte[] tn = null;
    InputStream in = parent.getClass().getResourceAsStream(path);
    try{
      int length = in.available();
      tn = new byte[length];
      in.read(tn);
      image = Toolkit.getDefaultToolkit().createImage(tn);
    } catch(Exception e){
      System.out.println("Error loading image "+path+": "+e);
    }
    return image;
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  // End of variables declaration//GEN-END:variables
  class AnimatePanel extends JPanel {
    Image animationFrame;
    int frameNumber, frameDelay;
    int imageWidth, imageHeight;
    Timer iconTimer;
    
    public AnimatePanel(Image frame) {
      super();
      
      frameNumber = 0;
      frameDelay = 10;
      animationFrame = frame;
      iconTracker = new MediaTracker(this);
      iconTracker.addImage(animationFrame, 0);
      try{
        iconTracker.waitForAll();
      }catch(InterruptedException except){
        System.out.println("Error loading animated icons");
      }
      imageWidth = animationFrame.getWidth(this);
      imageHeight = animationFrame.getHeight(this);

      setPreferredSize(new Dimension(imageWidth, imageHeight));
      setMinimumSize(new Dimension(imageWidth, imageHeight));
      setMaximumSize(new Dimension(1024, imageHeight));
      
      iconTimer = new Timer(frameDelay,
      new ActionListener() {
        public void actionPerformed(ActionEvent e) {
          if(projectList.isRunning()){
            frameNumber++;
            iconPanel.repaint();
          }
        }
      });
      
      iconTimer.setInitialDelay(0);
    }
    
    public void start() {
      iconTimer.start();
    }
    
    //Draw the current frame of animation.
    public void paintComponent(Graphics g) {
      super.paintComponent(g); //paint the background
      int width = getWidth();
      int height = getHeight();
      frameNumber = frameNumber%(width+imageWidth);
      
      //Paint the frame into the image.
      g.drawImage(animationFrame, (frameNumber%(width+imageWidth))-imageWidth, 0, this);
    }
  }
}
