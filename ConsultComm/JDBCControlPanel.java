import java.util.*;
import java.sql.*;
import java.io.*;
//GUI Componenets
import javax.swing.*;
import javax.swing.table.*;
//XML Components
import org.w3c.dom.*;
import org.xml.sax.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

public class JDBCControlPanel extends javax.swing.JFrame {
  private final static int DATE_SQLDATE = 0;
  private final static int DATE_SQLTIMESTAMP = 1;
  private final static int DATE_CCYYMMDD = 2;
  private final static int HOUR_FULL = 0;
  private final static int HOUR_QUARTER = 1;
  private final static int HOUR_TENTH = 2;
  private final static String odbcDriverName = "sun.jdbc.odbc.JdbcOdbcDriver";
  
  private String name = "";
  private String url = "";
  private static String userName = "";
  private static String password="";
  private static String database="";
  private static String table="";
  private static String projectDatabase="";
  private static String projectTable="";
  private static String projectField="";
  private static boolean projectValidate;
  private int hourFormat;
  private boolean projectCase;
  private boolean useExport;
  private Vector errorList;
  private TableMap tableMap;
  private static boolean validated;
  
  /** Creates new form JDBCControlPanel */
  public JDBCControlPanel() {
    tableMap = new TableMap();
    readPrefs();
  }
  
  public void initGUI() {
    initComponents();
    toggleODBC();
    toggleValidateProject();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    tabbedPane = new javax.swing.JTabbedPane();
    driverPanel = new javax.swing.JPanel();
    driverInputPanel = new javax.swing.JPanel();
    nameLabel = new javax.swing.JLabel();
    nameField = new javax.swing.JTextField();
    urlLabel = new javax.swing.JLabel();
    urlField = new javax.swing.JTextField();
    dbLabel = new javax.swing.JLabel();
    dbField = new javax.swing.JTextField();
    tableLabel = new javax.swing.JLabel();
    tableField = new javax.swing.JTextField();
    odbcCheckBox = new javax.swing.JCheckBox();
    driverButtonPanel = new javax.swing.JPanel();
    driverOK = new javax.swing.JButton();
    driverCancel = new javax.swing.JButton();
    driverTest = new javax.swing.JButton();
    fieldPanel = new javax.swing.JPanel();
    fieldScrollPane = new javax.swing.JScrollPane();
    fieldMapping = new javax.swing.JTable();
    fieldButtonPanel = new javax.swing.JPanel();
    fieldOK = new javax.swing.JButton();
    fieldCancel = new javax.swing.JButton();
    fieldRefresh = new javax.swing.JButton();
    optionPanel = new javax.swing.JPanel();
    optionInputPanel = new javax.swing.JPanel();
    hourLabel = new javax.swing.JLabel();
    hourComboBox = new javax.swing.JComboBox();
    projectCaseCheckBox = new javax.swing.JCheckBox();
    projValidateCheckBox = new javax.swing.JCheckBox();
    projDBLabel = new javax.swing.JLabel();
    projDBField = new javax.swing.JTextField();
    projTableLabel = new javax.swing.JLabel();
    projTableField = new javax.swing.JTextField();
    projFieldLabel = new javax.swing.JLabel();
    projFieldComboBox = new javax.swing.JComboBox();
    optionButtonPanel = new javax.swing.JPanel();
    optionOK = new javax.swing.JButton();
    optionCancel = new javax.swing.JButton();
    optionApply = new javax.swing.JButton();
    
    getContentPane().setLayout(new java.awt.GridLayout(1, 1));
    
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        exitForm(evt);
      }
    });
    
    tabbedPane.setPreferredSize(new java.awt.Dimension(387, 254));
    driverPanel.setLayout(new java.awt.BorderLayout());
    
    driverPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        showDriverPanel(evt);
      }
    });
    
    driverInputPanel.setLayout(new java.awt.GridBagLayout());
    java.awt.GridBagConstraints gridBagConstraints1;
    
    nameLabel.setText("Driver Name");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverInputPanel.add(nameLabel, gridBagConstraints1);
    
    nameField.setColumns(20);
    nameField.setText(name);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverInputPanel.add(nameField, gridBagConstraints1);
    
    urlLabel.setText("URL");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverInputPanel.add(urlLabel, gridBagConstraints1);
    
    urlField.setText(url);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverInputPanel.add(urlField, gridBagConstraints1);
    
    dbLabel.setText("Database");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverInputPanel.add(dbLabel, gridBagConstraints1);
    
    dbField.setText(database);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverInputPanel.add(dbField, gridBagConstraints1);
    
    tableLabel.setText("Table");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverInputPanel.add(tableLabel, gridBagConstraints1);
    
    tableField.setText(table);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverInputPanel.add(tableField, gridBagConstraints1);
    
    odbcCheckBox.setSelected(name.equals(odbcDriverName));
    odbcCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    odbcCheckBox.setText("Use ODBC Bridge");
    odbcCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        toggleODBC(evt);
      }
    });
    
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverInputPanel.add(odbcCheckBox, gridBagConstraints1);
    
    driverPanel.add(driverInputPanel, java.awt.BorderLayout.CENTER);
    
    driverOK.setText("OK");
    driverOK.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveDriverSettings(evt);
      }
    });
    
    driverButtonPanel.add(driverOK);
    
    driverCancel.setText("Cancel");
    driverCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancel(evt);
      }
    });
    
    driverButtonPanel.add(driverCancel);
    
    driverTest.setText("Test");
    driverTest.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        testDriverSettings(evt);
      }
    });
    
    driverButtonPanel.add(driverTest);
    
    driverPanel.add(driverButtonPanel, java.awt.BorderLayout.SOUTH);
    
    tabbedPane.addTab("Driver Settings", driverPanel);
    
    fieldPanel.setLayout(new java.awt.BorderLayout());
    
    fieldPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        showFieldMap(evt);
      }
    });
    
    fieldMapping.setModel(tableMap.toTableModel());
    fieldScrollPane.setViewportView(fieldMapping);
    
    fieldPanel.add(fieldScrollPane, java.awt.BorderLayout.CENTER);
    
    fieldOK.setText("OK");
    fieldOK.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveDriverSettings(evt);
      }
    });
    
    fieldButtonPanel.add(fieldOK);
    
    fieldCancel.setText("Cancel");
    fieldCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancel(evt);
      }
    });
    
    fieldButtonPanel.add(fieldCancel);
    
    fieldRefresh.setText("Refresh");
    fieldRefresh.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        refreshFieldMap(evt);
      }
    });
    
    fieldButtonPanel.add(fieldRefresh);
    
    fieldPanel.add(fieldButtonPanel, java.awt.BorderLayout.SOUTH);
    
    tabbedPane.addTab("Field Mappings", fieldPanel);
    
    optionPanel.setLayout(new java.awt.BorderLayout());
    
    optionPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        showOptionPanel(evt);
      }
    });
    
    optionInputPanel.setLayout(new java.awt.GridBagLayout());
    java.awt.GridBagConstraints gridBagConstraints2;
    
    hourLabel.setText("Export hours by:");
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
    optionInputPanel.add(hourLabel, gridBagConstraints2);
    
    hourComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Full Precision", "Quarter of an hour", "Tenth of an hour" }));
    hourComboBox.setSelectedIndex(hourFormat);
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
    optionInputPanel.add(hourComboBox, gridBagConstraints2);
    
    projectCaseCheckBox.setSelected(projectCase);
    projectCaseCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    projectCaseCheckBox.setText("Upper-Case Project");
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
    optionInputPanel.add(projectCaseCheckBox, gridBagConstraints2);
    
    projValidateCheckBox.setSelected(projectValidate);
    projValidateCheckBox.setForeground(new java.awt.Color(102, 102, 153));
    projValidateCheckBox.setText("Validate Project");
    projValidateCheckBox.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        toggleValidateProject(evt);
      }
    });
    
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
    optionInputPanel.add(projValidateCheckBox, gridBagConstraints2);
    
    projDBLabel.setText("Project Database:");
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
    optionInputPanel.add(projDBLabel, gridBagConstraints2);
    
    projDBField.setText(projectDatabase);
    projDBField.setEnabled(false);
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
    optionInputPanel.add(projDBField, gridBagConstraints2);
    
    projTableLabel.setText("Project Table:");
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
    optionInputPanel.add(projTableLabel, gridBagConstraints2);
    
    projTableField.setText(projectTable);
    projTableField.setEnabled(false);
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
    optionInputPanel.add(projTableField, gridBagConstraints2);
    
    projFieldLabel.setText("Project Field");
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.fill = java.awt.GridBagConstraints.HORIZONTAL;
    optionInputPanel.add(projFieldLabel, gridBagConstraints2);
    
    projFieldComboBox.setModel(new DefaultComboBoxModel(new String[] {projectField}));
    projFieldComboBox.setEnabled(false);
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    gridBagConstraints2.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints2.anchor = java.awt.GridBagConstraints.WEST;
    optionInputPanel.add(projFieldComboBox, gridBagConstraints2);
    
    optionPanel.add(optionInputPanel, java.awt.BorderLayout.CENTER);
    
    optionOK.setText("OK");
    optionOK.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveDriverSettings(evt);
      }
    });
    
    optionButtonPanel.add(optionOK);
    
    optionCancel.setText("Cancel");
    optionCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancel(evt);
      }
    });
    
    optionButtonPanel.add(optionCancel);
    
    optionApply.setText("Refresh");
    optionApply.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        applyOptions(evt);
      }
    });
    
    optionButtonPanel.add(optionApply);
    
    optionPanel.add(optionButtonPanel, java.awt.BorderLayout.SOUTH);
    
    tabbedPane.addTab("Options", optionPanel);
    
    getContentPane().add(tabbedPane);
    
    pack();
  }//GEN-END:initComponents
  
  private void applyOptions(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyOptions
    projectDatabase = projDBField.getText();
    projectTable = projTableField.getText();
    int projFieldIndex = projFieldComboBox.getSelectedIndex();
    projectField = (String)projFieldComboBox.getItemAt(projFieldIndex);
    String[] fieldNames = getProjectFieldNames();
    DefaultComboBoxModel boxModel;
    if(fieldNames == null) {
      boxModel = new DefaultComboBoxModel(new String[] {"No Fields Found"});
      projFieldComboBox.setEnabled(false);
    } else {
      boxModel = new DefaultComboBoxModel(fieldNames);
      projFieldComboBox.setEnabled(true);
    }
    projFieldComboBox.setModel(boxModel);
    optionInputPanel.repaint();
  }//GEN-LAST:event_applyOptions
  
  private void toggleValidateProject(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleValidateProject
    toggleValidateProject();
  }//GEN-LAST:event_toggleValidateProject
  
  private void toggleValidateProject() {
    if(projValidateCheckBox.isSelected()) {
      projDBField.enable();
      projTableField.enable();
    } else {
      projDBField.disable();
      projTableField.disable();
    }
    optionInputPanel.repaint();
  }
  
  private void showDriverPanel(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_showDriverPanel
    getRootPane().setDefaultButton(driverOK);
  }//GEN-LAST:event_showDriverPanel
  
  private void showOptionPanel(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_showOptionPanel
    getRootPane().setDefaultButton(optionOK);
  }//GEN-LAST:event_showOptionPanel
  
  private void toggleODBC(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toggleODBC
    toggleODBC();
  }//GEN-LAST:event_toggleODBC
  private void toggleODBC() {
    if(odbcCheckBox.isSelected()) {
      nameField.setText(odbcDriverName);
      nameField.disable();
      urlLabel.setText("Data Source");
      int lastColon = url.lastIndexOf(':')+1;
      urlField.setText(url.substring(lastColon));
    } else {
      nameField.setText(name);
      nameField.enable();
      urlLabel.setText("URL");
      urlField.setText(url);
    }
    driverInputPanel.repaint();
  }
  private void refreshFieldMap(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshFieldMap
    try {
      tableMap.init();
      fieldMapping.setModel(tableMap.toTableModel());
      fieldMapping.repaint();
    } catch (SQLException e) {
      System.err.println("Couldn't initialize table mapping");
    }
  }//GEN-LAST:event_refreshFieldMap
  
  private void showFieldMap(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_showFieldMap
    getRootPane().setDefaultButton(fieldOK);
    if(tableMap.size() == 0) {
      try {
        tableMap.init();
        fieldMapping.setModel(tableMap.toTableModel());
        fieldMapping.repaint();
      } catch (SQLException e) {
        System.err.println("Couldn't initialize table mapping");
      }
    }
  }//GEN-LAST:event_showFieldMap
  
  private void testDriverSettings(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testDriverSettings
    name = nameField.getText();
    url = urlField.getText();
    try {
      if(name.equals(odbcDriverName)) url = "jdbc:odbc:"+url;
      database = dbField.getText();
      table = tableField.getText();
      Connection conn = openConnection();
      if(conn != null) {
        DatabaseMetaData dbmeta = conn.getMetaData();
        ResultSet cols = dbmeta.getColumns(null, database, table, null);
        if((cols == null) || ! cols.next())
          JOptionPane.showMessageDialog(this, "Table "+database+"."+table+" cannot be found.", "Table Not Found", JOptionPane.ERROR_MESSAGE);
        else
          JOptionPane.showMessageDialog(this, "Driver connection verified.", "Driver verified", JOptionPane.INFORMATION_MESSAGE);
        if(cols != null) cols.close();
        conn.close();
      }
    } catch (SQLException e) {
      System.err.println("Uncaught SQL error during test: "+e);
    }
  }//GEN-LAST:event_testDriverSettings
  
  private void cancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel
    exitForm();
  }//GEN-LAST:event_cancel
  
  private void saveDriverSettings(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDriverSettings
    name = nameField.getText();
    url = urlField.getText();
    if(name.equals(odbcDriverName)) url = "jdbc:odbc:"+url;
    database = dbField.getText();
    table = tableField.getText();
    projectDatabase = projDBField.getText();
    projectTable = projTableField.getText();
    if(projFieldComboBox.getItemCount() != 0) {
      int projFieldIndex = projFieldComboBox.getSelectedIndex();
      projectField = (String)projFieldComboBox.getItemAt(projFieldIndex);
    }
    projectValidate = projValidateCheckBox.isSelected();
    hourFormat = hourComboBox.getSelectedIndex();
    projectCase = projectCaseCheckBox.isSelected();
    for(int i=0; i < tableMap.size(); i++) {
      String value = (String)fieldMapping.getValueAt(i, 2);
      FieldMap record = (FieldMap)tableMap.elementAt(i);
      record.valueExpression = value;
    }
    savePrefs();
    exitForm();
  }//GEN-LAST:event_saveDriverSettings
        private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
          exitForm();
    }//GEN-LAST:event_exitForm
    
    private void exitForm() {
      setVisible(false);
    }
    
    private void savePrefs() {
      File prefs = new File(CsltComm.prefsDir, "JDBCConnection.def");
      try {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document doc = docBuilder.newDocument();
        Element rootNode = doc.createElement("jdbccontrolpanel");
        rootNode.setAttribute("version", "0.1");
        doc.appendChild(rootNode);
        
        Element newNode = doc.createElement("driver");
        newNode.setAttribute("name", name);
        newNode.setAttribute("url", url);
        newNode.setAttribute("username", userName);
        newNode.setAttribute("database", database);
        newNode.setAttribute("table", table);
        rootNode.appendChild(newNode);
        
        newNode = doc.createElement("options");
        newNode.setAttribute("hourFormat", ""+hourFormat);
        newNode.setAttribute("projectCase", ""+projectCase);
        newNode.setAttribute("projectValidate", ""+projectValidate);
        newNode.setAttribute("projectDatabase", projectDatabase);
        newNode.setAttribute("projectTable", projectTable);
        newNode.setAttribute("projectField", projectField);
        rootNode.appendChild(newNode);
        
        //Save field mappings
        for(int i=0; i<tableMap.size(); i++){
          FieldMap record = tableMap.elementAt(i);
          newNode = doc.createElement("fieldmap");
          newNode.setAttribute("name", record.dbFieldName);
          newNode.setAttribute("type", ""+record.sqlType);
          newNode.setAttribute("index", ""+record.dbFieldIndex);
          newNode.setAttribute("value", record.valueExpression);
          rootNode.appendChild(newNode);
        }
        
        doc.getDocumentElement().normalize();
        TransformerFactory fac = TransformerFactory.newInstance();
        Transformer trans = fac.newTransformer();
        trans.transform(new DOMSource(doc.getDocumentElement()), new StreamResult(prefs));
      } catch (ParserConfigurationException e) {
        System.err.println("Error writing prefs file: "+e);
        e.printStackTrace(System.out);
      } catch (Exception e) {
        System.err.println("Cannot write prefs file: "+e);
        e.printStackTrace(System.out);
      }
    }
    
    private void readPrefs() {
      File prefs = new File(CsltComm.prefsDir, "JDBCConnection.def");
      if (prefs.exists()) {
        try {
          DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
          Document doc = docBuilder.parse(prefs);
          doc.getDocumentElement().normalize();
          
          NamedNodeMap attributes = null;
          
          NodeList drivers = doc.getElementsByTagName("driver");
          Node driver = drivers.item(0);
          attributes = driver.getAttributes();
          name = attributes.getNamedItem("name").getNodeValue();
          url = attributes.getNamedItem("url").getNodeValue();
          if(attributes.getNamedItem("username") != null)
            userName = attributes.getNamedItem("username").getNodeValue();
          if(attributes.getNamedItem("database") != null)
            database = attributes.getNamedItem("database").getNodeValue();
          if(attributes.getNamedItem("table") != null)
            table = attributes.getNamedItem("table").getNodeValue();
          
          NodeList options = doc.getElementsByTagName("options");
          Node option = options.item(0);
          attributes = option.getAttributes();
          hourFormat = Integer.parseInt(attributes.getNamedItem("hourFormat").getNodeValue());
          if(attributes.getNamedItem("projectCase") != null)
            projectCase = Boolean.valueOf(attributes.getNamedItem("projectCase").getNodeValue()).booleanValue();
          if(attributes.getNamedItem("projectValidate") != null)
            projectValidate = Boolean.valueOf(attributes.getNamedItem("projectValidate").getNodeValue()).booleanValue();
          if(attributes.getNamedItem("projectDatabase") != null)
            projectDatabase = attributes.getNamedItem("projectDatabase").getNodeValue();
          if(attributes.getNamedItem("projectTable") != null)
            projectTable = attributes.getNamedItem("projectTable").getNodeValue();
          if(attributes.getNamedItem("projectField") != null)
            projectField = attributes.getNamedItem("projectField").getNodeValue();
          else
            projectField = "No Fields Found";
          
          NodeList fieldMaps = doc.getElementsByTagName("fieldmap");
          tableMap.fieldMaps.clear();
          for(int i=0; i<fieldMaps.getLength(); i++){
            Node fieldMap = fieldMaps.item(i);
            attributes = fieldMap.getAttributes();
            Node nameNode = attributes.getNamedItem("name");
            String fieldName = nameNode.getNodeValue();
            Node typeNode = attributes.getNamedItem("type");
            short sqlType = Short.parseShort(typeNode.getNodeValue());
            Node indexNode = attributes.getNamedItem("index");
            int fieldIndex = Integer.parseInt(indexNode.getNodeValue());
            Node valueNode = attributes.getNamedItem("value");
            String valueExpression = valueNode.getNodeValue();
            FieldMap record = new FieldMap(fieldName, sqlType, fieldIndex, valueExpression);
            tableMap.fieldMaps.addElement(record);
          }
        } catch (SAXParseException e) {
          System.err.println("Error parsing prefs file, line "+e.getLineNumber()+": "+e.getMessage());
        } catch (SAXException e) {
          System.err.println("Error reading prefs file: "+e);
          e.printStackTrace(System.out);
        } catch (Exception e) {
          System.err.println("Cannot read prefs file: "+e);
          e.printStackTrace(System.out);
        }
      }
      
      prefs = new File(CsltComm.prefsDir, "ClntComm.def");
      if (prefs.exists()) {
        try {
          DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
          Document doc = docBuilder.parse(prefs);
          doc.getDocumentElement().normalize();

          NamedNodeMap attribute = null;

          //Get attribute flags
          NodeList attributeFlags = doc.getElementsByTagName("attributes");
          if(attributeFlags.getLength() > 0) {
            Node attributeFlag = attributeFlags.item(0);
            attribute = attributeFlag.getAttributes();
            String attributesString = attribute.getNamedItem("value").getNodeValue();
            int attributes = Integer.parseInt(attributesString);
            useExport = (ClntComm.SHOW_EXPORT ^ attributes) != (ClntComm.SHOW_EXPORT | attributes);
          } else {
            useExport = true;
          }
        } catch (SAXParseException e) {
          System.err.println("Error parsing prefs file, line "+e.getLineNumber()+": "+e.getMessage());
        } catch (SAXException e) {
          System.err.println("Error reading prefs file: "+e);
          e.printStackTrace(System.out);
        } catch (Exception e) {
          System.err.println("Cannot read prefs file: "+e);
          e.printStackTrace(System.out);
        }
      }
    }
    
    public Connection openConnection() {
      Connection conn = null;
      errorList = new Vector();
      
      try{
        Class.forName(name);
        if(! validated) { //Send login dialog box
          LoginDialog prompt = new LoginDialog(this, userName);
          prompt.pack();
          prompt.setLocationRelativeTo(this);
          prompt.setVisible(true);
        }
        Properties properties = new Properties();
        properties.put("password", password);
        properties.put("user", userName);
        properties.put("prompt", "false");
        conn = DriverManager.getConnection(url, properties);
        if(conn.isClosed()) {
          errorList.addElement("Cannot open connection");
          conn = null;
        } else if(conn.isReadOnly()) {
          errorList.addElement("Connection is read only");
          conn = null;
        }
        if(conn != null) validated = true;
      } catch (ClassNotFoundException e) {
        String extdir = System.getProperty("java.ext.dirs");
        String msgString = "Could not find JDBC driver "+name+".\n"+
        "Make sure you have the correct driver files and that they\n"+
        "are installed in "+extdir+",\n then restart ConsultComm.";
        errorList.addElement(msgString);
      } catch (SQLException e) {
        errorList.addElement("Could not build JDBC connection: "+e);
      } catch (NullPointerException e) {
        errorList.addElement("One or more arguments are null");
      } catch (Exception e) {
        errorList.addElement(e.toString());
      }
      if(errorList.size() > 0)
        JOptionPane.showMessageDialog(this, errorList.elementAt(0), "Database Connection Error", JOptionPane.ERROR_MESSAGE);
      return conn;
    }
    
    public boolean exportTimeRecordSet(TimeRecordSet times) {
      Connection conn = openConnection();
      PreparedStatement insert = null;
      boolean worked = false;
      
      try {
        if(tableMap.size() == 0) return false;
        String queryString = "?";
        for(int i=1; i<tableMap.size(); i++) queryString += " ,?";
        insert = conn.prepareStatement("INSERT INTO "+database+"."+table+" VALUES ("+queryString+")");
        
        // Okay... we've got a problem. We want to test for errors
        // before committing changes to the database but we also
        // can't depend on the rollback() method working (not all
        // db's we want to use support transaction management).
        // So we first load everything into a two dimensional array
        // then we insert the records into the database.
        Vector statements = new Vector();
        for(int j=0; j < times.size(); j++) {
          TimeRecord record = times.elementAt(j);
          FieldMap hourTest = new FieldMap("TEST", java.sql.Types.DECIMAL, 0, "$HOURS"); //Find out how many hours exist
          java.math.BigDecimal hours = (java.math.BigDecimal)hourTest.getValue(record);
          if((hours.compareTo(new java.math.BigDecimal(0.0)) <= 0) || (! record.export && useExport)) continue;
          Object[] statement = new Object[tableMap.size()];
          for(int i=0; i < statement.length; i++) {
            FieldMap fieldMap = tableMap.elementAt(i);
            statement[i] = fieldMap.getValue(record);
          }
          statements.addElement(statement);
        }
        
        for(int j=0; j < statements.size(); j++) {
          Object[] statement = (Object[])statements.elementAt(j);
          for(int i=0; i < statement.length; i++) {
            insert.setObject(i+1, statement[i]);
          }
          insert.execute();
        }
        
        conn.commit();
        worked = true;
      } catch (ProjectInvalidException e) {
        JOptionPane.showMessageDialog(this, e.getMessage(), "Export Error", JOptionPane.ERROR_MESSAGE);
        worked = false;
      } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, e.getMessage(), "Export Error", JOptionPane.ERROR_MESSAGE);
        System.err.println("Could not export timelist to database: "+e);
        worked = false;
      } finally {
        try {
          if(insert != null) insert.close();
          if(conn != null) conn.close();
        } catch (Exception ex) {}
      }
      return worked;
    }
    
    private String[] getProjectFieldNames() {
      Connection conn = openConnection();
      String[] names = null;
      ResultSet cols = null;
      
      try {
        Vector records = new Vector();
        DatabaseMetaData dbmeta = conn.getMetaData();
        cols = dbmeta.getColumns(null, projectDatabase, projectTable, null);
        while(cols.next())
          records.addElement(cols.getString(4));
        
        names = new String[records.size()];
        for(int i=0; i<names.length; i++)
          names[i] = (String)records.elementAt(i);
      } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, e.getMessage(), "Project Error", JOptionPane.ERROR_MESSAGE);
        System.err.println("Could not get project list from database: "+e);
      } finally {
        try {
          if(cols != null) cols.close();
          if(conn != null) conn.close();
        } catch (Exception ex) {}
      }
      return names;
    }
    
    private boolean validateProject(String project) {
      Connection conn = openConnection();
      Statement stmt = null;
      ResultSet rs = null;
      boolean isValid = false;
      try {
        String queryString = "SELECT "+projectField+" FROM "+projectDatabase+"."+projectTable+
        " WHERE "+projectField+"='"+project+"'";
        stmt = conn.createStatement();
        rs = stmt.executeQuery(queryString);
        isValid = rs.next();
        rs.close();
        stmt.close();
        conn.close();
      } catch (SQLException e) {
        System.err.println("Couldn't attempt project validation: "+e);
      } finally {
        try {
          if(rs != null) rs.close();
          if(stmt != null) stmt.close();
          if(conn != null) conn.close();
        } catch (Exception ex) {}
      }
      return isValid;
    }
    
    public static String typeString(int sqlType) {
      switch(sqlType) {
        case java.sql.Types.ARRAY:
          return "ARRAY";
        case java.sql.Types.BIGINT:
          return "BIGINT";
        case java.sql.Types.BINARY:
          return "BINARY";
        case java.sql.Types.BIT:
          return "BIT";
        case java.sql.Types.BLOB:
          return "BLOB";
        case java.sql.Types.CHAR:
          return "CHAR";
        case java.sql.Types.CLOB:
          return "CLOB";
        case java.sql.Types.DATE:
          return "DATE";
        case java.sql.Types.DECIMAL:
          return "DECIMAL";
        case java.sql.Types.DOUBLE:
          return "DOUBLE";
        case java.sql.Types.FLOAT:
          return "FLOAT";
        case java.sql.Types.INTEGER:
          return "INTEGER";
        case java.sql.Types.LONGVARBINARY:
          return "LONGVARBINARY";
        case java.sql.Types.LONGVARCHAR:
          return "LONGVARCHAR";
        case java.sql.Types.NULL:
          return "NULL";
        case java.sql.Types.NUMERIC:
          return "NUMERIC";
        case java.sql.Types.SMALLINT:
          return "SMALLINT";
        case java.sql.Types.TIME:
          return "TIME";
        case java.sql.Types.TIMESTAMP:
          return "TIMESTAMP";
        case java.sql.Types.TINYINT:
          return "TINYINT";
        case java.sql.Types.VARBINARY:
          return "VARBINARY";
        case java.sql.Types.VARCHAR:
          return "VARCHAR";
        default:
          return "OTHER";
      }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JPanel driverPanel;
    private javax.swing.JPanel driverInputPanel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JTextField urlField;
    private javax.swing.JLabel dbLabel;
    private javax.swing.JTextField dbField;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JTextField tableField;
    private javax.swing.JCheckBox odbcCheckBox;
    private javax.swing.JPanel driverButtonPanel;
    private javax.swing.JButton driverOK;
    private javax.swing.JButton driverCancel;
    private javax.swing.JButton driverTest;
    private javax.swing.JPanel fieldPanel;
    private javax.swing.JScrollPane fieldScrollPane;
    private javax.swing.JTable fieldMapping;
    private javax.swing.JPanel fieldButtonPanel;
    private javax.swing.JButton fieldOK;
    private javax.swing.JButton fieldCancel;
    private javax.swing.JButton fieldRefresh;
    private javax.swing.JPanel optionPanel;
    private javax.swing.JPanel optionInputPanel;
    private javax.swing.JLabel hourLabel;
    private javax.swing.JComboBox hourComboBox;
    private javax.swing.JCheckBox projectCaseCheckBox;
    private javax.swing.JCheckBox projValidateCheckBox;
    private javax.swing.JLabel projDBLabel;
    private javax.swing.JTextField projDBField;
    private javax.swing.JLabel projTableLabel;
    private javax.swing.JTextField projTableField;
    private javax.swing.JLabel projFieldLabel;
    private javax.swing.JComboBox projFieldComboBox;
    private javax.swing.JPanel optionButtonPanel;
    private javax.swing.JButton optionOK;
    private javax.swing.JButton optionCancel;
    private javax.swing.JButton optionApply;
    // End of variables declaration//GEN-END:variables
    
    private class LoginDialog extends JDialog {
      private JOptionPane optionPane;
      
      LoginDialog(JFrame frame, String user) {
        super(frame, true);
        setTitle("Login to Server");
        
        final JTextField userField = new JTextField(user);
        userField.setColumns(10);
        final JPasswordField passField = new JPasswordField();
        passField.setColumns(10);
        JPanel loginPanel = new JPanel();
        loginPanel.setLayout(new java.awt.GridLayout(2, 2));
        loginPanel.add(new JLabel("Username: "));
        loginPanel.add(userField);
        loginPanel.add(new JLabel("Password: "));
        loginPanel.add(passField);
        
        optionPane = new JOptionPane(loginPanel, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
        setContentPane(optionPane);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
          public void windowClosing(java.awt.event.WindowEvent we) {
            optionPane.setValue(new Integer(JOptionPane.CLOSED_OPTION));
          }
        });
        
        optionPane.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
          public void propertyChange(java.beans.PropertyChangeEvent e) {
            String prop = e.getPropertyName();
            
            if (isVisible() && (e.getSource() == optionPane) && (prop.equals(JOptionPane.VALUE_PROPERTY) || prop.equals(JOptionPane.INPUT_VALUE_PROPERTY))) {
              String value = optionPane.getValue().toString();
              if (value == JOptionPane.UNINITIALIZED_VALUE) return;
              optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);
              
              if (value.equals("0")) {
                password = new String(passField.getPassword());
                userName = userField.getText();
                setVisible(false);
              } else { // user closed dialog or clicked cancel
                setVisible(false);
              }
            }
          }
        });
      }
    }
    
    private class TableMap {
      Vector fieldMaps;
      private final String[] titles = {"Field Name", "Type", "Value"};
      
      TableMap() {
        fieldMaps = new Vector();
      }
      
      protected void init() throws java.sql.SQLException {
        fieldMaps.clear();
        Connection conn = openConnection();
        DatabaseMetaData dbmeta = conn.getMetaData();
        ResultSet cols = dbmeta.getColumns(null, database, table, null);
        while(cols.next())
          fieldMaps.addElement(new FieldMap(cols));
        cols.close();
        conn.close();
      }
      
      public int size() {
        return fieldMaps.size();
      }
      
      public FieldMap elementAt(int i) {
        return (FieldMap)fieldMaps.elementAt(i);
      }
      
      public DefaultTableModel toTableModel(){
        DefaultTableModel model = new javax.swing.table.DefaultTableModel(
        //Set to three empty columns
        new Object [][][] {
        },
        titles
        ) {
          public boolean isCellEditable(int rowIndex, int columnIndex) {
            boolean[] editable = {false, false, true};
            return editable[columnIndex];
          }
        };
        
        Enumeration records = fieldMaps.elements();
        while (records.hasMoreElements()) {
          FieldMap record = (FieldMap)records.nextElement();
          model.addRow(new Object[] {record.dbFieldName, typeString(record.sqlType), record.valueExpression});
        }
        return model;
      }
    }
    
    private class FieldMap {
      int sqlType;
      int dbFieldIndex;
      String dbFieldName;
      String valueExpression = "";
      
      FieldMap(ResultSet rs) throws java.sql.SQLException {
        dbFieldName = rs.getString(4);
        sqlType = rs.getShort(5);
        dbFieldIndex = rs.getInt(17);
      }
      
      FieldMap(String name, int type, int index, String value) {
        dbFieldName = name;
        sqlType = type;
        dbFieldIndex = index;
        valueExpression = value;
      }
      
      public String toString() {
        return dbFieldName+"("+dbFieldIndex+"): "+valueExpression+" type "+typeString(sqlType);
      }
      
      protected Object getValue(TimeRecord record) throws ClassCastException, ProjectInvalidException {
        StringTokenizer toker = new StringTokenizer(valueExpression, "$ ", true);
        Object realValue = null;
        while(toker.hasMoreTokens()) {
          String value = toker.nextToken();
          if(value.equals("$")) {
            value = toker.nextToken();
            if(value.equals("PROJECT")) {
              if(sqlType != java.sql.Types.CHAR) throw new ClassCastException("Must be CHAR SQL type for project name");
              else {
                if(projectCase) realValue = record.projectName.toUpperCase();
                else realValue = record.projectName;
                if(projectValidate && ! validateProject((String)realValue))
                  throw new ProjectInvalidException("Project "+realValue+" not in table "+projectDatabase+"."+projectTable);
              }
            } else if(value.equals("USERNAME")) {
              if(sqlType != java.sql.Types.CHAR) throw new ClassCastException("Must be CHAR SQL type for username");
              else realValue = userName;
            } else if(value.equals("DATE")) {
              switch(sqlType) {
                case java.sql.Types.DATE:
                  realValue = new java.sql.Date(System.currentTimeMillis());
                  break;
                case java.sql.Types.TIMESTAMP:
                  realValue = new java.sql.Timestamp(System.currentTimeMillis());
                  break;
                case java.sql.Types.TIME:
                  realValue = new java.sql.Time(System.currentTimeMillis());
                  break;
                case java.sql.Types.INTEGER:
                case java.sql.Types.DECIMAL:
                case java.sql.Types.NUMERIC:
                  Calendar today = Calendar.getInstance();
                  int year = today.get(Calendar.YEAR);
                  int month = today.get(Calendar.MONTH)+1;
                  int date = today.get(Calendar.DATE);
                  double cymd = (year*10000)+(month*100)+date;
                  realValue = new java.math.BigDecimal(cymd);
                  break;
                default:
                  throw new ClassCastException("Unknown conversion for date");
              }
            }else if(value.equals("HOURS")) {
              if(sqlType != java.sql.Types.DECIMAL && sqlType != java.sql.Types.NUMERIC && sqlType != java.sql.Types.INTEGER)
                throw new ClassCastException("Must be DECIMAL SQL type for hours");
              switch(hourFormat) {
                case HOUR_FULL:
                  realValue = record.getHours(60, 2);
                  break;
                case HOUR_QUARTER:
                  realValue = record.getHours(60*15, 2);
                  break;
                case HOUR_TENTH:
                  realValue = record.getHours(60*6, 1);
                  break;
                default:
                  realValue = record.getHours(60, 2);
              }
            } else if(value.equals("BILLABLE")) {
              switch(sqlType) {
                case java.sql.Types.CHAR:
                  realValue = record.billable ? "Y" : "N";
                  break;
                case java.sql.Types.BIT:
                  realValue = new Boolean(record.billable);
                  break;
                case java.sql.Types.INTEGER:
                  realValue = record.billable ? new Integer(-1) : new Integer(0);
                  break;
                default:
                  throw new ClassCastException("Unknown conversion for billable flag");
              }
            } else {
              System.err.println("Unknown expression variable: "+value);
            }
          } else {
            try {
              realValue = new Integer(value);
            } catch (NumberFormatException e) {
              try {
                realValue = new java.math.BigDecimal(value);
              } catch (NumberFormatException e2) {
                realValue = value;
              }
            }
          }
        }
        return realValue;
      }
    }
}
