import java.io.*;
import java.util.*;
import java.sql.*;
import javax.swing.*;
//XML Components
import org.w3c.dom.*;
import org.xml.sax.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

/**
 *
 * @author  jellis
 */
public class JDBCControlPanel extends javax.swing.JFrame {
  private String name;
  private String url;
  private String jar;
  private static String userName;
  private static String password;
  private Vector errorList;
  
  /** Creates new form JDBCControlPanel */
  public JDBCControlPanel() {
    readPrefs();
  }
  
  public void initGUI() {
    initComponents();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    titleLabel = new javax.swing.JLabel();
    nameLabel = new javax.swing.JLabel();
    nameField = new javax.swing.JTextField();
    urlLabel = new javax.swing.JLabel();
    urlField = new javax.swing.JTextField();
    jarLabel = new javax.swing.JLabel();
    jarField = new javax.swing.JTextField();
    statusLabel = new javax.swing.JLabel();
    okButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    testButton = new javax.swing.JButton();
    browseButton = new javax.swing.JButton();
    
    getContentPane().setLayout(new java.awt.GridBagLayout());
    java.awt.GridBagConstraints gridBagConstraints1;
    
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        exitForm(evt);
      }
    });
    
    titleLabel.setText("JDBC Control Panel");
    titleLabel.setForeground(java.awt.Color.black);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    getContentPane().add(titleLabel, gridBagConstraints1);
    
    nameLabel.setText("Class Name");
    nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    getContentPane().add(nameLabel, gridBagConstraints1);
    
    nameField.setColumns(20);
    nameField.setText(name);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    getContentPane().add(nameField, gridBagConstraints1);
    
    urlLabel.setText("URL");
    urlLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    getContentPane().add(urlLabel, gridBagConstraints1);
    
    urlField.setColumns(20);
    urlField.setText(url);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    getContentPane().add(urlField, gridBagConstraints1);
    
    jarLabel.setText("JAR File");
    jarLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    getContentPane().add(jarLabel, gridBagConstraints1);
    
    jarField.setColumns(20);
    jarField.setText(jar);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.RELATIVE;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.WEST;
    getContentPane().add(jarField, gridBagConstraints1);
    
    statusLabel.setText("Driver not verified. Hit [Test] to verify.");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 5;
    gridBagConstraints1.gridwidth = 3;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    getContentPane().add(statusLabel, gridBagConstraints1);
    
    okButton.setText("OK");
    okButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        saveInput(evt);
      }
    });
    
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 4;
    getContentPane().add(okButton, gridBagConstraints1);
    
    cancelButton.setText("Cancel");
    cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        cancelInput(evt);
      }
    });
    
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 1;
    gridBagConstraints1.gridy = 4;
    getContentPane().add(cancelButton, gridBagConstraints1);
    
    testButton.setText("Test");
    testButton.addMouseListener(new java.awt.event.MouseAdapter() {
      public void mouseClicked(java.awt.event.MouseEvent evt) {
        testInput(evt);
      }
    });
    
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 2;
    gridBagConstraints1.gridy = 4;
    getContentPane().add(testButton, gridBagConstraints1);
    
    browseButton.setFont(new java.awt.Font("Dialog", 0, 12));
    browseButton.setText("Browse...");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 2;
    gridBagConstraints1.gridy = 3;
    gridBagConstraints1.anchor = java.awt.GridBagConstraints.EAST;
    getContentPane().add(browseButton, gridBagConstraints1);
    
    pack();
  }//GEN-END:initComponents
  
  private void testInput(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testInput
    Connection conn = openConnection();
    String statusString = null;
    if(conn != null) {
      statusString = "Driver connection verified.";
      try {
        conn.close();
      } catch (SQLException e) {
        System.err.println("Couldn't close database driver during test.");
      }
    } else {
      statusString = "Driver test failed: "+errorList.elementAt(0);
    }
    statusLabel.setText(statusString);
  }//GEN-LAST:event_testInput
  
  private void cancelInput(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelInput
    exitForm();
  }//GEN-LAST:event_cancelInput
  
  private void saveInput(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveInput
    name = nameField.getText();
    url = urlField.getText();
    jar = jarField.getText();
    savePrefs();
    exitForm();
  }//GEN-LAST:event_saveInput
  
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
      exitForm();
    }//GEN-LAST:event_exitForm
    
    private void exitForm() {
      setVisible(false);
    }
    
    private void savePrefs() {
      File prefs = new File("JDBCConnection.def");
      try {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document doc = docBuilder.newDocument();
        Element rootNode = doc.createElement("jdbccontrolpanel");
        rootNode.setAttribute("version", "0.1");
        doc.appendChild(rootNode);
        
        Element newNode = doc.createElement("driver");
        newNode.setAttribute("name", name);
        newNode.setAttribute("url", url);
        newNode.setAttribute("jar", jar);
        newNode.setAttribute("username", userName);
        rootNode.appendChild(newNode);
        
        doc.getDocumentElement().normalize();
        TransformerFactory fac = TransformerFactory.newInstance();
        Transformer trans = fac.newTransformer();
        trans.transform(new DOMSource(doc.getDocumentElement()), new StreamResult(prefs));
      } catch (ParserConfigurationException e) {
        System.err.println("Error writing prefs file: "+e);
        e.printStackTrace(System.out);
      } catch (Exception e) {
        System.err.println("Cannot write prefs file: "+e);
        e.printStackTrace(System.out);
      }
    }
    
    private void readPrefs() {
      File prefs = new File("JDBCConnection.def");
      if (prefs.exists()) {
        try {
          DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
          Document doc = docBuilder.parse(prefs);
          doc.getDocumentElement().normalize();
          
          NamedNodeMap attributes = null;
          
          NodeList drivers = doc.getElementsByTagName("driver");
          Node driver = drivers.item(0);
          attributes = driver.getAttributes();
          name = attributes.getNamedItem("name").getNodeValue();
          url = attributes.getNamedItem("url").getNodeValue();
          jar = attributes.getNamedItem("jar").getNodeValue();
          userName = attributes.getNamedItem("username").getNodeValue();
        } catch (SAXParseException e) {
          System.err.println("Error parsing prefs file, line "+e.getLineNumber()+": "+e.getMessage());
        } catch (SAXException e) {
          System.err.println("Error reading prefs file: "+e);
          e.printStackTrace(System.out);
        } catch (Exception e) {
          System.err.println("Cannot read prefs file: "+e);
          e.printStackTrace(System.out);
        }
      }
    }
    
    public Connection openConnection() {
      Connection conn = null;
      errorList = new Vector();
      LoginDialog prompt = new LoginDialog(this, userName);
      prompt.pack();
      prompt.setLocationRelativeTo(this);
      prompt.setVisible(true);
      
      try{
        File jarFile = new File(jar);
        if(! jarFile.exists())
          System.err.println("Warning: Java Archive File does not seem to exist.");
        String classpath = System.getProperty("java.class.path");
        String fileSeparator = System.getProperty("path.separator");
        System.setProperty("java.class.path", classpath+fileSeparator+jar);
        Class.forName(name);
        Properties properties = new Properties();
        properties.put("password", password);
        properties.put("user", userName);
        conn = DriverManager.getConnection(url, properties);
        if(conn.isClosed()) {
          errorList.addElement("Cannot open connection");
          conn = null;
        } else if(conn.isReadOnly()) {
          errorList.addElement("Connection is read only");
          conn = null;
        }
      } catch (SecurityException e) {
        errorList.addElement("JRE won't let us alter the classpath!");
      } catch (SQLException e) {
        errorList.addElement("Could not build JDBC connection to "+name+":"+url+": "+e);
      } catch (ClassNotFoundException e) {
        errorList.addElement("Could not find JDBC driver "+name);
      } catch (NullPointerException e) {
        errorList.addElement("One or more arguments are null");
      } catch (Exception e) {
        errorList.addElement("Generic Exception: "+e);
      }
      return conn;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JTextField urlField;
    private javax.swing.JLabel jarLabel;
    private javax.swing.JTextField jarField;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton testButton;
    private javax.swing.JButton browseButton;
    // End of variables declaration//GEN-END:variables
    
    class LoginDialog extends JDialog {
      private JOptionPane optionPane;
      
      public LoginDialog(JFrame frame, String user) {
        super(frame, true);
        setTitle("Login to Server");

        final JTextField userField = new JTextField(user);
        userField.setColumns(10);
        final JPasswordField passField = new JPasswordField();
        passField.setColumns(10);
        JPanel loginPanel = new JPanel();
        loginPanel.setLayout(new java.awt.GridLayout(2, 2));
        loginPanel.add(new JLabel("Username: "));
        loginPanel.add(userField);
        loginPanel.add(new JLabel("Password: "));
        loginPanel.add(passField);
        
        optionPane = new JOptionPane(loginPanel, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
        setContentPane(optionPane);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
          public void windowClosing(java.awt.event.WindowEvent we) {
            optionPane.setValue(new Integer(JOptionPane.CLOSED_OPTION));
          }
        });
        
        optionPane.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
          public void propertyChange(java.beans.PropertyChangeEvent e) {
            String prop = e.getPropertyName();
            
            if (isVisible() && (e.getSource() == optionPane) && (prop.equals(JOptionPane.VALUE_PROPERTY) || prop.equals(JOptionPane.INPUT_VALUE_PROPERTY))) {
              String value = optionPane.getValue().toString();
              if (value == JOptionPane.UNINITIALIZED_VALUE) return;
              optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);
              
              if (value.equals("0")) {
                userName = userField.getText();
                password = new String(passField.getPassword());
                setVisible(false);
              } else { // user closed dialog or clicked cancel
                setVisible(false);
              }
            }
          }
        });
      }
    }
}
