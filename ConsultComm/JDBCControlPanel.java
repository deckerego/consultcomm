import java.util.*;
import java.sql.*;
import java.io.*;
//GUI Componenets
import javax.swing.*;
import javax.swing.table.*;
//XML Components
import org.w3c.dom.*;
import org.xml.sax.*;
import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.dom.*;
import javax.xml.transform.stream.*;

/**
 *
 * @author  jellis
 */
public class JDBCControlPanel extends javax.swing.JFrame {
  private String name;
  private String url;
  private static String userName;
  private static String password;
  private static String database;
  private static String table;
  private Vector errorList;
  private TableMap tableMap;
  private static boolean validated;
  
  /** Creates new form JDBCControlPanel */
  public JDBCControlPanel() {
    tableMap = new TableMap();
    readPrefs();
  }
  
  public void initGUI() {
    initComponents();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents() {//GEN-BEGIN:initComponents
    tabbedPane = new javax.swing.JTabbedPane();
    driverPanel = new javax.swing.JPanel();
    titleLabel = new javax.swing.JLabel();
    nameLabel = new javax.swing.JLabel();
    nameField = new javax.swing.JTextField();
    urlLabel = new javax.swing.JLabel();
    urlField = new javax.swing.JTextField();
    dbLabel = new javax.swing.JLabel();
    dbField = new javax.swing.JTextField();
    driverOK = new javax.swing.JButton();
    driverCancel = new javax.swing.JButton();
    driverTest = new javax.swing.JButton();
    statusLabel = new javax.swing.JLabel();
    tableLabel = new javax.swing.JLabel();
    tableField = new javax.swing.JTextField();
    fieldPanel = new javax.swing.JPanel();
    fieldScrollPane = new javax.swing.JScrollPane();
    fieldMapping = new javax.swing.JTable();
    fieldButtonPanel = new javax.swing.JPanel();
    fieldOK = new javax.swing.JButton();
    fieldCancel = new javax.swing.JButton();
    
    getContentPane().setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));
    
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        exitForm(evt);
      }
    });
    
    driverPanel.setLayout(new java.awt.GridBagLayout());
    java.awt.GridBagConstraints gridBagConstraints1;
    
    titleLabel.setText("JDBC Driver Settings");
    titleLabel.setForeground(java.awt.Color.black);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    driverPanel.add(titleLabel, gridBagConstraints1);
    
    nameLabel.setText("Driver Name");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverPanel.add(nameLabel, gridBagConstraints1);
    
    nameField.setColumns(20);
    nameField.setText(name);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    driverPanel.add(nameField, gridBagConstraints1);
    
    urlLabel.setText("URL");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverPanel.add(urlLabel, gridBagConstraints1);
    
    urlField.setColumns(20);
    urlField.setText(url);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    driverPanel.add(urlField, gridBagConstraints1);
    
    dbLabel.setText("Database");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverPanel.add(dbLabel, gridBagConstraints1);
    
    dbField.setColumns(20);
    dbField.setText(database);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    driverPanel.add(dbField, gridBagConstraints1);
    
    driverOK.setText("OK");
    driverOK.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        saveDriverSettings(evt);
      }
    });
    
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 5;
    driverPanel.add(driverOK, gridBagConstraints1);
    
    driverCancel.setText("Cancel");
    driverCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        cancel(evt);
      }
    });
    
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 1;
    gridBagConstraints1.gridy = 5;
    driverPanel.add(driverCancel, gridBagConstraints1);
    
    driverTest.setText("Test");
    driverTest.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        testDriverSettings(evt);
      }
    });
    
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 2;
    gridBagConstraints1.gridy = 5;
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    driverPanel.add(driverTest, gridBagConstraints1);
    
    statusLabel.setText("Hit [Test] to verify settings");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverPanel.add(statusLabel, gridBagConstraints1);
    
    tableLabel.setText("Table");
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 0;
    gridBagConstraints1.gridy = 4;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverPanel.add(tableLabel, gridBagConstraints1);
    
    tableField.setColumns(20);
    tableField.setText(table);
    gridBagConstraints1 = new java.awt.GridBagConstraints();
    gridBagConstraints1.gridx = 1;
    gridBagConstraints1.gridy = 4;
    gridBagConstraints1.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints1.fill = java.awt.GridBagConstraints.HORIZONTAL;
    driverPanel.add(tableField, gridBagConstraints1);
    
    tabbedPane.addTab("Driver Settings", driverPanel);
    
    fieldPanel.setLayout(new java.awt.BorderLayout());
    
    fieldPanel.addComponentListener(new java.awt.event.ComponentAdapter() {
      public void componentShown(java.awt.event.ComponentEvent evt) {
        showFieldMap(evt);
      }
    });
    
    fieldMapping.setModel(new javax.swing.table.DefaultTableModel(
    new Object [][] {
      
    },
    new String [] {
      
    }
    ));
    fieldScrollPane.setViewportView(fieldMapping);
    
    fieldPanel.add(fieldScrollPane, java.awt.BorderLayout.CENTER);
    
    fieldButtonPanel.setLayout(new java.awt.GridBagLayout());
    java.awt.GridBagConstraints gridBagConstraints2;
    
    fieldOK.setText("OK");
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    fieldButtonPanel.add(fieldOK, gridBagConstraints2);
    
    fieldCancel.setText("Cancel");
    gridBagConstraints2 = new java.awt.GridBagConstraints();
    fieldButtonPanel.add(fieldCancel, gridBagConstraints2);
    
    fieldPanel.add(fieldButtonPanel, java.awt.BorderLayout.SOUTH);
    
    tabbedPane.addTab("Field Mappings", fieldPanel);
    
    getContentPane().add(tabbedPane);
    
    pack();
  }//GEN-END:initComponents

  private void showFieldMap(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_showFieldMap
    if(! validated) {
      try {
        tableMap.init();
        fieldMapping.setModel(tableMap.toTableModel());
        fieldMapping.repaint();
      } catch (SQLException e) {
        System.err.println("Couldn't initialize table mapping");
      }
    }
  }//GEN-LAST:event_showFieldMap
  
  private void testDriverSettings(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testDriverSettings
    name = nameField.getText();
    url = urlField.getText();
    database = dbField.getText();
    table = tableField.getText();
    Connection conn = openConnection();
    String statusString = null;
    if(conn != null) {
      statusString = "Driver connection verified.";
      try {
        conn.close();
      } catch (SQLException e) {
        System.err.println("Couldn't close database driver during test.");
      }
    } else {
      statusString = "Driver test failed: "+errorList.elementAt(0);
    }
    statusLabel.setText(statusString);
  }//GEN-LAST:event_testDriverSettings
  
  private void cancel(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel
    exitForm();
  }//GEN-LAST:event_cancel
  
  private void saveDriverSettings(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveDriverSettings
    name = nameField.getText();
    url = urlField.getText();
    database = dbField.getText();
    table = tableField.getText();
    savePrefs();
    exitForm();
  }//GEN-LAST:event_saveDriverSettings
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
      exitForm();
    }//GEN-LAST:event_exitForm
    
    private void exitForm() {
      setVisible(false);
    }
    
    private void savePrefs() {
      File prefs = new File("JDBCConnection.def");
      try {
        DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
        Document doc = docBuilder.newDocument();
        Element rootNode = doc.createElement("jdbccontrolpanel");
        rootNode.setAttribute("version", "0.1");
        doc.appendChild(rootNode);
        
        Element newNode = doc.createElement("driver");
        newNode.setAttribute("name", name);
        newNode.setAttribute("url", url);
        newNode.setAttribute("username", userName);
        newNode.setAttribute("database", database);
        newNode.setAttribute("table", table);
        rootNode.appendChild(newNode);
        
        doc.getDocumentElement().normalize();
        TransformerFactory fac = TransformerFactory.newInstance();
        Transformer trans = fac.newTransformer();
        trans.transform(new DOMSource(doc.getDocumentElement()), new StreamResult(prefs));
      } catch (ParserConfigurationException e) {
        System.err.println("Error writing prefs file: "+e);
        e.printStackTrace(System.out);
      } catch (Exception e) {
        System.err.println("Cannot write prefs file: "+e);
        e.printStackTrace(System.out);
      }
    }
    
    private void readPrefs() {
      File prefs = new File("JDBCConnection.def");
      if (prefs.exists()) {
        try {
          DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
          DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
          Document doc = docBuilder.parse(prefs);
          doc.getDocumentElement().normalize();
          
          NamedNodeMap attributes = null;
          
          NodeList drivers = doc.getElementsByTagName("driver");
          Node driver = drivers.item(0);
          attributes = driver.getAttributes();
          name = attributes.getNamedItem("name").getNodeValue();
          url = attributes.getNamedItem("url").getNodeValue();
          userName = attributes.getNamedItem("username").getNodeValue();
          database = attributes.getNamedItem("database").getNodeValue();
          table = attributes.getNamedItem("table").getNodeValue();
        } catch (SAXParseException e) {
          System.err.println("Error parsing prefs file, line "+e.getLineNumber()+": "+e.getMessage());
        } catch (SAXException e) {
          System.err.println("Error reading prefs file: "+e);
          e.printStackTrace(System.out);
        } catch (Exception e) {
          System.err.println("Cannot read prefs file: "+e);
          e.printStackTrace(System.out);
        }
      }
    }
    
    public Connection openConnection() {
      Connection conn = null;
      errorList = new Vector();
      if(! validated) {
        LoginDialog prompt = new LoginDialog(this, userName);
        prompt.pack();
        prompt.setLocationRelativeTo(this);
        prompt.setVisible(true);
      }
      
      try{
/* This code won't work... though I wish it would. It was supposed to
 * dynamically load a JAR file with a JDBC driver from an arbitrary path.
 * Unfortunately this can't be done because of how the methods
 * getCallerClassLoader() and getCallerClass(ClassLoader, String) in
 * the DriverManager class are written. They expect to be able to do a
 * straight Class.forName(String, true, ClassLoader) which only works if the
 * JAR was present in the classpath when the JVM started. I leave the code
 * here in case this starts working in 1.4. Until then the solution is to
 * use the extension mechanism in JRE 1.2+ and place the necessary JAR files
 * in the JRE's ext/ directory.
        char[] fileSeperator = System.getProperty("file.separator").toCharArray();
        String jarPath = jar.replace(fileSeperator[0], '/');
        URL[] jarURL = {new URL("file://"+jarPath)};
        URLClassLoader jarLoader = new URLClassLoader(jarURL, this.getClass().getClassLoader());
        Driver driver = (Driver)jarLoader.loadClass(name).newInstance();
        DriverManager.registerDriver(driver);
 */
        Class.forName(name);
        Properties properties = new Properties();
        properties.put("password", password);
        properties.put("user", userName);
        conn = DriverManager.getConnection(url, properties);
        if(conn.isClosed()) {
          errorList.addElement("Cannot open connection");
          conn = null;
        } else if(conn.isReadOnly()) {
          errorList.addElement("Connection is read only");
          conn = null;
        }
        if(conn != null) validated = true;
      } catch (ClassNotFoundException e) {
        errorList.addElement("Could not find driver "+name);
      } catch (SQLException e) {
        errorList.addElement("Could not build JDBC connection: "+e);
      } catch (NullPointerException e) {
        errorList.addElement("One or more arguments are null");
      } catch (Exception e) {
        errorList.addElement(e.toString());
      }
      return conn;
    }

    public static String typeString(short sqlType) {
      switch(sqlType) {
        case java.sql.Types.ARRAY:
          return "ARRAY";
        case java.sql.Types.BIGINT:
          return "BIGINT";
        case java.sql.Types.BINARY:
          return "BINARY";
        case java.sql.Types.BIT:
          return "BIT";
        case java.sql.Types.BLOB:
          return "BLOB";
        case java.sql.Types.CHAR:
          return "CHAR";
        case java.sql.Types.CLOB:
          return "CLOB";
        case java.sql.Types.DATE:
          return "DATE";
        case java.sql.Types.DECIMAL:
          return "DECIMAL";
        case java.sql.Types.DOUBLE:
          return "DOUBLE";
        case java.sql.Types.FLOAT:
          return "FLOAT";
        case java.sql.Types.INTEGER:
          return "INTEGER";
        case java.sql.Types.LONGVARBINARY:
          return "LONGVARBINARY";
        case java.sql.Types.LONGVARCHAR:
          return "LONGVARCHAR";
        case java.sql.Types.NULL:
          return "NULL";
        case java.sql.Types.NUMERIC:
          return "NUMERIC";
        case java.sql.Types.SMALLINT:
          return "SMALLINT";
        case java.sql.Types.TIME:
          return "TIME";
        case java.sql.Types.TIMESTAMP:
          return "TIMESTAMP";
        case java.sql.Types.TINYINT:
          return "TINYINT";
        case java.sql.Types.VARBINARY:
          return "VARBINARY";
        case java.sql.Types.VARCHAR:
          return "VARCHAR";
        default:
          return "OTHER";
      }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JPanel driverPanel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel urlLabel;
    private javax.swing.JTextField urlField;
    private javax.swing.JLabel dbLabel;
    private javax.swing.JTextField dbField;
    private javax.swing.JButton driverOK;
    private javax.swing.JButton driverCancel;
    private javax.swing.JButton driverTest;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JTextField tableField;
    private javax.swing.JPanel fieldPanel;
    private javax.swing.JScrollPane fieldScrollPane;
    private javax.swing.JTable fieldMapping;
    private javax.swing.JPanel fieldButtonPanel;
    private javax.swing.JButton fieldOK;
    private javax.swing.JButton fieldCancel;
    // End of variables declaration//GEN-END:variables
    
    private class LoginDialog extends JDialog {
      private JOptionPane optionPane;
      
      LoginDialog(JFrame frame, String user) {
        super(frame, true);
        setTitle("Login to Server");
        
        final JTextField userField = new JTextField(user);
        userField.setColumns(10);
        final JPasswordField passField = new JPasswordField();
        passField.setColumns(10);
        JPanel loginPanel = new JPanel();
        loginPanel.setLayout(new java.awt.GridLayout(2, 2));
        loginPanel.add(new JLabel("Username: "));
        loginPanel.add(userField);
        loginPanel.add(new JLabel("Password: "));
        loginPanel.add(passField);
        
        optionPane = new JOptionPane(loginPanel, JOptionPane.PLAIN_MESSAGE, JOptionPane.OK_CANCEL_OPTION);
        setContentPane(optionPane);
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
          public void windowClosing(java.awt.event.WindowEvent we) {
            optionPane.setValue(new Integer(JOptionPane.CLOSED_OPTION));
          }
        });
        
        optionPane.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
          public void propertyChange(java.beans.PropertyChangeEvent e) {
            String prop = e.getPropertyName();
            
            if (isVisible() && (e.getSource() == optionPane) && (prop.equals(JOptionPane.VALUE_PROPERTY) || prop.equals(JOptionPane.INPUT_VALUE_PROPERTY))) {
              String value = optionPane.getValue().toString();
              if (value == JOptionPane.UNINITIALIZED_VALUE) return;
              optionPane.setValue(JOptionPane.UNINITIALIZED_VALUE);
              
              if (value.equals("0")) {
                password = new String(passField.getPassword());
                userName = userField.getText();
                setVisible(false);
              } else { // user closed dialog or clicked cancel
                setVisible(false);
              }
            }
          }
        });
      }
    }
    
    private class TableMap {
      Vector fieldMaps;
      private String[] titles = {"Field Name", "Type", "Value"};

      TableMap() {
        fieldMaps = new Vector();
      }
      
      protected void init() throws java.sql.SQLException {
        Connection conn = openConnection();
        DatabaseMetaData dbmeta = conn.getMetaData();
        ResultSet cols = dbmeta.getColumns(null, database, table, null);
        while(cols.next())
          fieldMaps.addElement(new FieldMap(cols));
        cols.close();
        conn.close();
      }
      
      public DefaultTableModel toTableModel(){
        DefaultTableModel model = new javax.swing.table.DefaultTableModel(
        //Set to three empty columns
        new Object [][][] {
        },
        titles
        ) {
          public boolean isCellEditable(int rowIndex, int columnIndex) {
            boolean[] editable = {false, false, true};
            return editable[columnIndex];
          }
        };
        
        Enumeration records = fieldMaps.elements();
        while (records.hasMoreElements()) {
          FieldMap record = (FieldMap)records.nextElement();
          model.addRow(new Object[] {record.dbFieldName, typeString(record.sqlType), record.valueExpression});
        }
        return model;
      }
    }
    
    private class FieldMap {
      short sqlType;
      int dbFieldIndex;
      String dbFieldName;
      String valueExpression;
      
      FieldMap(ResultSet rs) throws java.sql.SQLException {
        dbFieldName = rs.getString(4);
        sqlType = rs.getShort(5);
        dbFieldIndex = rs.getInt(17);
        valueExpression = "";
      }
      
      public String toString() {
        return dbFieldName+"("+dbFieldIndex+"): "+valueExpression+" type "+typeString(sqlType);
      }
      
      protected Object getValue(TimeRecord record) throws ClassCastException {
        StringTokenizer toker = new StringTokenizer(valueExpression, "$ ", true);
        Object realValue = null;
        while(toker.hasMoreTokens()) {
          String value = toker.nextToken();
          String delim = value.substring(0,1);
          value = value.substring(1).toUpperCase();
          if(delim.equals("$")) {
            if(value.equals("PROJECT")) {
              if(sqlType != java.sql.Types.CHAR) throw new ClassCastException("Must be CHAR SQL type for project name");
              else realValue = record.projectName;
            } else if(value.equals("SQLDATE")) {
              if(sqlType != java.sql.Types.DATE) throw new ClassCastException("Must be DATE SQL type for entry date");
              else realValue = new java.sql.Date(System.currentTimeMillis());
            } else if(value.equals("TIMESTAMP")) {
              if(sqlType != java.sql.Types.TIMESTAMP) throw new ClassCastException("Must be TIMESTAMP SQL type for entry timestamp");
              else realValue = new java.sql.Timestamp(System.currentTimeMillis());
            } else if(value.equals("HOURS")) {
              if(sqlType != java.sql.Types.DECIMAL) throw new ClassCastException("Must be CHAR SQL type for project name");
              else realValue = new java.math.BigDecimal(((double)record.seconds)/((double)(60*60+1000)));
            } else {
              System.err.println("Unknown expression variable: "+value);
            }
          } else {
            try {
              realValue = new Integer(value);
            } catch (NumberFormatException e) {
              try {
                realValue = new java.math.BigDecimal(value);
              } catch (NumberFormatException e2) {
                realValue = value;
              }
            }
          }
        }
        return realValue;
      }
    }
}
